[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ModelAnteproyecto",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelAnteproyecto",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "Estudiante",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "Estudiante",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "django.contrib.auth",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponsePermanentRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponsePermanentRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponsePermanentRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "FormEditarUsuario",
        "importPath": "login.forms",
        "description": "login.forms",
        "isExtraImport": true,
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "FormEditarUsuario",
        "importPath": "login.forms",
        "description": "login.forms",
        "isExtraImport": true,
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "FormEditarUsuario",
        "importPath": "login.forms",
        "description": "login.forms",
        "isExtraImport": true,
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "grupo_usuario",
        "importPath": "plataform_CIGAP.utils.decoradores",
        "description": "plataform_CIGAP.utils.decoradores",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.decoradores",
        "documentation": {}
    },
    {
        "label": "grupo_usuario",
        "importPath": "plataform_CIGAP.utils.decoradores",
        "description": "plataform_CIGAP.utils.decoradores",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.decoradores",
        "documentation": {}
    },
    {
        "label": "grupo_usuario",
        "importPath": "plataform_CIGAP.utils.decoradores",
        "description": "plataform_CIGAP.utils.decoradores",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.decoradores",
        "documentation": {}
    },
    {
        "label": "fecha_actual",
        "importPath": "plataform_CIGAP.utils.funcionalidades_fechas",
        "description": "plataform_CIGAP.utils.funcionalidades_fechas",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.funcionalidades_fechas",
        "documentation": {}
    },
    {
        "label": "fecha_actual",
        "importPath": "plataform_CIGAP.utils.funcionalidades_fechas",
        "description": "plataform_CIGAP.utils.funcionalidades_fechas",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.funcionalidades_fechas",
        "documentation": {}
    },
    {
        "label": "fecha_actual",
        "importPath": "plataform_CIGAP.utils.funcionalidades_fechas",
        "description": "plataform_CIGAP.utils.funcionalidades_fechas",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.funcionalidades_fechas",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "ModelError",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "ModelRetroalimentacionesAnteproyecto",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "solicitud",
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "isExtraImport": true,
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "FormAnteproyecto",
        "importPath": "estudiante.forms",
        "description": "estudiante.forms",
        "isExtraImport": true,
        "detail": "estudiante.forms",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "csrf_failure",
        "importPath": "django.views.csrf",
        "description": "django.views.csrf",
        "isExtraImport": true,
        "detail": "django.views.csrf",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0001_initial",
        "description": "correspondencia.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('estudiante', '0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelRetroalimentacionesAnteproyecto',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "correspondencia.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0002_modelretroalimentacionesanteproyecto_revs_dadas",
        "description": "correspondencia.migrations.0002_modelretroalimentacionesanteproyecto_revs_dadas",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modelretroalimentacionesanteproyecto',\n            name='revs_dadas',\n            field=models.IntegerField(blank=True, null=True),\n        ),",
        "detail": "correspondencia.migrations.0002_modelretroalimentacionesanteproyecto_revs_dadas",
        "documentation": {}
    },
    {
        "label": "ModelRetroalimentacionesAnteproyectoAdmin",
        "kind": 6,
        "importPath": "correspondencia.admin",
        "description": "correspondencia.admin",
        "peekOfCode": "class ModelRetroalimentacionesAnteproyectoAdmin(admin.ModelAdmin):\n    list_display = ('anteproyecto', 'retroalimentacion', 'fecha_retroalimentacion', 'estado', 'revs_dadas', 'doc_retroalimentacion_link')\n    def doc_retroalimentacion_link(self, obj):\n        if obj.doc_retroalimentacion:\n            if isinstance(obj.doc_retroalimentacion, bytes):\n                base64_data = base64.b64encode(obj.doc_retroalimentacion).decode('utf8')\n                url = f'data:application/octet-stream;base64,{base64_data}'\n                return format_html('<a href=\"{}\" download=\"{}\">Descargar Carta de Presentación</a>',\n                                   url,\n                                   f'Retroalimentacion_{obj.anteproyecto.nombre_anteproyecto}.pdf')",
        "detail": "correspondencia.admin",
        "documentation": {}
    },
    {
        "label": "CorrespondenciaConfig",
        "kind": 6,
        "importPath": "correspondencia.apps",
        "description": "correspondencia.apps",
        "peekOfCode": "class CorrespondenciaConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'correspondencia'",
        "detail": "correspondencia.apps",
        "documentation": {}
    },
    {
        "label": "FormRetroalimentacionAnteproyecto",
        "kind": 6,
        "importPath": "correspondencia.forms",
        "description": "correspondencia.forms",
        "peekOfCode": "class FormRetroalimentacionAnteproyecto(forms.ModelForm):\n    doc_retroalimentacion_convert = forms.FileField(required=True)\n    class Meta:\n        model = ModelRetroalimentacionesAnteproyecto\n        fields = ('retroalimentacion','doc_retroalimentacion_convert', 'estado')\n    def save(self, commit=True):\n        retroalimentacion = super().save(commit=False)\n        retroalimentacion.retroalimentacion = self.cleaned_data['retroalimentacion']\n        retroalimentacion.doc_retroalimentacion = self.cleaned_data['doc_retroalimentacion_convert'].read()\n        retroalimentacion.estado = self.cleaned_data['estado']",
        "detail": "correspondencia.forms",
        "documentation": {}
    },
    {
        "label": "ModelRetroalimentacionesAnteproyecto",
        "kind": 6,
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "peekOfCode": "class ModelRetroalimentacionesAnteproyecto(models.Model):\n    ESTADOS_CHOICES = [\n        ('aprobado', 'Aprobado'),\n        ('aprobado_con_correcciones', 'Aprobado con correcciones'),\n        ('rechazado', 'Rechazado'),\n    ]\n    anteproyecto = models.ForeignKey(\n        ModelAnteproyecto, on_delete=models.CASCADE, related_name='retroalimentaciones')\n    retroalimentacion = models.TextField(max_length=10000)\n    fecha_retroalimentacion = models.CharField(max_length=50)",
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "correspondencia.urls",
        "description": "correspondencia.urls",
        "peekOfCode": "app_name = 'correspondencia'\n# Definicion de las rutas de la aplicacion\nurlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando')\n    path('', views.principal_correspondencia,\n         name='principal_correspondencia'),\n    path('view_list_proyects', views.view_list_proyects, name='view_list_proyects'),\n    path('solicitudes_respondidas', views.solicitudes_respondidas, name='solicitudes_respondidas'),\n    path('documentos_cargados', views.documentos_cargados, name='documentos_cargados'),",
        "detail": "correspondencia.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "correspondencia.urls",
        "description": "correspondencia.urls",
        "peekOfCode": "urlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando')\n    path('', views.principal_correspondencia,\n         name='principal_correspondencia'),\n    path('view_list_proyects', views.view_list_proyects, name='view_list_proyects'),\n    path('solicitudes_respondidas', views.solicitudes_respondidas, name='solicitudes_respondidas'),\n    path('documentos_cargados', views.documentos_cargados, name='documentos_cargados'),\n    path('formatos_documentos', views.formatos_documentos, name='formatos_documentos'),\n    path('ver_proyecto/<str:nombre_anteproyecto>',",
        "detail": "correspondencia.urls",
        "documentation": {}
    },
    {
        "label": "recuperar_anteproyectos",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_anteproyectos():\n    anteproyectos = ModelAnteproyecto.objects.all()\n    return anteproyectos\n# funcion para traer un anteproyecto en especifico\ndef recuperar_anteproyecto(nombre):\n    anteproyecto = ModelAnteproyecto.objects.get(\n        nombre_anteproyecto=nombre) if ModelAnteproyecto.objects.filter(nombre_anteproyecto=nombre).exists() else None\n    return anteproyecto\n# funcion para recuperar las imagenes de los usuarios\ndef recuperar_datos_integrantes(nombre):",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_anteproyecto",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_anteproyecto(nombre):\n    anteproyecto = ModelAnteproyecto.objects.get(\n        nombre_anteproyecto=nombre) if ModelAnteproyecto.objects.filter(nombre_anteproyecto=nombre).exists() else None\n    return anteproyecto\n# funcion para recuperar las imagenes de los usuarios\ndef recuperar_datos_integrantes(nombre):\n    usuario = Usuarios.objects.get(nombre_completo=nombre) if Usuarios.objects.filter(\n        nombre_completo=nombre).exists() else False\n    if usuario:\n        imagen_binaria = usuario.imagen",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_datos_integrantes",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_datos_integrantes(nombre):\n    usuario = Usuarios.objects.get(nombre_completo=nombre) if Usuarios.objects.filter(\n        nombre_completo=nombre).exists() else False\n    if usuario:\n        imagen_binaria = usuario.imagen\n        imagen = base64.b64encode(imagen_binaria).decode(\n            'utf8') if imagen_binaria else False\n        grupos = usuario.groups.values_list('name', flat=True)\n        grupo = 'Estudiante' if 'Estudiantes' in grupos else 'Director' if 'Directores' in grupos else 'Desconocido'\n        return {'nombre': nombre, 'imagen': imagen, 'grupo': grupo}",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitudes",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_solicitudes():\n    solicitudes = ModelRetroalimentacionesAnteproyecto.objects.all()\n    # context = {\n    #     # 'nombre_anteproyecto': solicitudes.anteproyecto.nombre_anteproyecto,\n    #     'retroalimentacion': solicitudes.retroalimentacion,\n    #     'fecha_retroalimentacion': solicitudes.fecha_retroalimentacion,\n    #     'doc_retroalimentacion': solicitudes.doc_retroalimentacion,\n    #     'estado': solicitudes.estado,\n    #     'revs_dadas': solicitudes.revs_dadas,\n    # }",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_documento",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_documento(documento):\n    documento = base64.b64encode(documento).decode(\n        'utf-8') if documento else None\n    return documento\n@login_required\n@grupo_usuario('Correspondencia')\ndef principal_correspondencia(request):\n    form_config = FormEditarUsuario(instance=request.user)\n    context = {'form_config': form_config}\n    return render(request, 'correspondencia/base_correspondencia.html', context)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "principal_correspondencia",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def principal_correspondencia(request):\n    form_config = FormEditarUsuario(instance=request.user)\n    context = {'form_config': form_config}\n    return render(request, 'correspondencia/base_correspondencia.html', context)\n########################################################################################################################\n# vista de listado de proyectos\n@login_required\n@grupo_usuario('Correspondencia')\ndef view_list_proyects(request):\n    anteproyectos = recuperar_anteproyectos()",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "view_list_proyects",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def view_list_proyects(request):\n    anteproyectos = recuperar_anteproyectos()\n    context = {'anteproyectos': anteproyectos}\n    return render(request, 'correspondencia/list_proyectos.html', context)\n########################################################################################################################\n# vista para conocer la informacion del proyecto\ndef ver_anteproyecto(request, nombre_anteproyecto):\n    anteproyecto = recuperar_anteproyecto(nombre_anteproyecto)\n    doc_anteproyecto = recuperar_documento(anteproyecto.anteproyecto)\n    doc_carta = recuperar_documento(anteproyecto.carta_presentacion)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "ver_anteproyecto",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def ver_anteproyecto(request, nombre_anteproyecto):\n    anteproyecto = recuperar_anteproyecto(nombre_anteproyecto)\n    doc_anteproyecto = recuperar_documento(anteproyecto.anteproyecto)\n    doc_carta = recuperar_documento(anteproyecto.carta_presentacion)\n    context = {'anteproyecto': anteproyecto,\n               'form_retroalimentacion': FormRetroalimentacionAnteproyecto,\n               'doc_anteproyecto': doc_anteproyecto,\n               'doc_carta': doc_carta}\n    if anteproyecto:\n        integrantes = (anteproyecto.nombre_integrante1, anteproyecto.nombre_integrante2,",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "enviar_retroalimentacion",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def enviar_retroalimentacion(request, nombre_anteproyecto):\n    anteproyecto = recuperar_anteproyecto(nombre_anteproyecto)\n    if anteproyecto is None:\n        return HttpResponse('Error: Anteproyecto no encontrado')\n    if request.method == 'POST':\n        form_retro = FormRetroalimentacionAnteproyecto(\n            request.POST, request.FILES)\n        if form_retro.is_valid():\n            retroalimentacion = form_retro.save(commit=False)\n            retroalimentacion.anteproyecto = anteproyecto",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "solicitudes_respondidas",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def solicitudes_respondidas(request):\n    respuestas = recuperar_solicitudes()\n    context = {}\n    for i, respuesta in enumerate(respuestas):\n        doc_binario = recuperar_documento(respuesta.doc_retroalimentacion)\n        context[f'respuesta_{i}'] = {\n            'respuesta': respuesta, 'doc_binario': doc_binario}\n        print(respuesta.doc_retroalimentacion)\n    return render(request, 'correspondencia/list_solicitudes.html', {'respuestas': context})\n########################################################################################################################",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "documentos_cargados",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def documentos_cargados(request):\n    return render(request, 'correspondencia/list_documentos_cargados.html')\n########################################################################################################################\ndef formatos_documentos(request):\n    return render(request, 'correspondencia/documentos_comite.html')",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "formatos_documentos",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def formatos_documentos(request):\n    return render(request, 'correspondencia/documentos_comite.html')",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "DirectorConfig",
        "kind": 6,
        "importPath": "director.apps",
        "description": "director.apps",
        "peekOfCode": "class DirectorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'director'",
        "detail": "director.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "director.urls",
        "description": "director.urls",
        "peekOfCode": "app_name = 'director'\n# Definicion de las rutas de la aplicacion\nurlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando'),\n    path('', views.principal_director, name='principal_director'),\n]",
        "detail": "director.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "director.urls",
        "description": "director.urls",
        "peekOfCode": "urlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando'),\n    path('', views.principal_director, name='principal_director'),\n]",
        "detail": "director.urls",
        "documentation": {}
    },
    {
        "label": "principal_director",
        "kind": 2,
        "importPath": "director.views",
        "description": "director.views",
        "peekOfCode": "def principal_director(request):\n    usuario = request.user\n    # recuperacion de la imagen propia del usuaario en formato binario\n    # print(imagen, 'esta es la imagen')\n    imagen = usuario.imagen\n    imagen_convertida = base64.b64encode(\n        imagen).decode('utf-8') if imagen else ''\n    if request.method == 'POST':\n        editar_usuario(request)\n    else:",
        "detail": "director.views",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0001_initial",
        "description": "estudiante.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Estudiante',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "estudiante.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0002_modelanteproyecto_enviado",
        "description": "estudiante.migrations.0002_modelanteproyecto_enviado",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modelanteproyecto',\n            name='enviado',\n            field=models.BooleanField(default=False),\n            preserve_default=False,",
        "detail": "estudiante.migrations.0002_modelanteproyecto_enviado",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0003_alter_modelanteproyecto_director_and_more",
        "description": "estudiante.migrations.0003_alter_modelanteproyecto_director_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0002_modelanteproyecto_enviado'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='director',\n            field=models.CharField(blank=True, max_length=200, null=True),\n        ),",
        "detail": "estudiante.migrations.0003_alter_modelanteproyecto_director_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0004_alter_modelanteproyecto_coodirector_and_more",
        "description": "estudiante.migrations.0004_alter_modelanteproyecto_coodirector_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0003_alter_modelanteproyecto_director_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='coodirector',\n            field=models.CharField(blank=True, max_length=200, null=True),\n        ),",
        "detail": "estudiante.migrations.0004_alter_modelanteproyecto_coodirector_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0005_remove_modelanteproyecto_enviado",
        "description": "estudiante.migrations.0005_remove_modelanteproyecto_enviado",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0004_alter_modelanteproyecto_coodirector_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='modelanteproyecto',\n            name='enviado',\n        ),\n    ]",
        "detail": "estudiante.migrations.0005_remove_modelanteproyecto_enviado",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0006_alter_modelanteproyecto_user",
        "description": "estudiante.migrations.0006_alter_modelanteproyecto_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0005_remove_modelanteproyecto_enviado'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='user',\n            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Anteproyecto', to=settings.AUTH_USER_MODEL),",
        "detail": "estudiante.migrations.0006_alter_modelanteproyecto_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more",
        "description": "estudiante.migrations.0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0006_alter_modelanteproyecto_user'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='modelanteproyecto',\n            old_name='nombre_proyecto',\n            new_name='nombre_anteproyecto',\n        ),",
        "detail": "estudiante.migrations.0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0008_remove_modelanteproyecto_rev_dadas",
        "description": "estudiante.migrations.0008_remove_modelanteproyecto_rev_dadas",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='modelanteproyecto',\n            name='rev_dadas',\n        ),\n    ]",
        "detail": "estudiante.migrations.0008_remove_modelanteproyecto_rev_dadas",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0009_modelanteproyecto_descripcion",
        "description": "estudiante.migrations.0009_modelanteproyecto_descripcion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0008_remove_modelanteproyecto_rev_dadas'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modelanteproyecto',\n            name='descripcion',\n            field=models.CharField(blank=True, max_length=500, null=True),\n        ),",
        "detail": "estudiante.migrations.0009_modelanteproyecto_descripcion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0010_alter_modelanteproyecto_descripcion",
        "description": "estudiante.migrations.0010_alter_modelanteproyecto_descripcion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0009_modelanteproyecto_descripcion'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='descripcion',\n            field=models.TextField(blank=True, max_length=500, null=True),\n        ),",
        "detail": "estudiante.migrations.0010_alter_modelanteproyecto_descripcion",
        "documentation": {}
    },
    {
        "label": "ModelAnteproyectoAdmin",
        "kind": 6,
        "importPath": "estudiante.admin",
        "description": "estudiante.admin",
        "peekOfCode": "class ModelAnteproyectoAdmin(admin.ModelAdmin):\n    list_display = (\n        'nombre_anteproyecto',\n        'nombre_integrante1',\n        'nombre_integrante2',\n        'director',\n        'coodirector',\n        'carta_presentacion_link',\n        'anteproyecto_link'\n    )",
        "detail": "estudiante.admin",
        "documentation": {}
    },
    {
        "label": "EstudianteConfig",
        "kind": 6,
        "importPath": "estudiante.apps",
        "description": "estudiante.apps",
        "peekOfCode": "class EstudianteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'estudiante'",
        "detail": "estudiante.apps",
        "documentation": {}
    },
    {
        "label": "FormAnteproyecto",
        "kind": 6,
        "importPath": "estudiante.forms",
        "description": "estudiante.forms",
        "peekOfCode": "class FormAnteproyecto(forms.ModelForm):\n    carta_presentacion_convert = forms.FileField(required=True)\n    anteproyecto_convert = forms.FileField(required=True)\n    class Meta:\n        model = ModelAnteproyecto\n        fields = ('nombre_anteproyecto', 'descripcion', 'nombre_integrante1', 'nombre_integrante2',\n                  'carta_presentacion_convert', 'anteproyecto_convert', 'director', 'coodirector')\n        widgets = {\n            'nombre_integrante2': forms.TextInput(attrs={'placeholder': 'Si tienes.'}),\n            'coodirector': forms.TextInput(attrs={'placeholder': 'Si tienes.'}),",
        "detail": "estudiante.forms",
        "documentation": {}
    },
    {
        "label": "Estudiante",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class Estudiante(models.Model):\n    nombres = models.CharField(max_length=100, verbose_name='Nombres')\n    apellidos = models.CharField(max_length=100, verbose_name='Apellidos')\n    email = models.EmailField(\n        max_length=100, unique=True, verbose_name='Correo')\n    # Otros campos y métodos que necesites\n# creacion del modelo de primera solicitud.\n#!funcionando\nclass ModelPrimeraSolicitud(models.Model):\n    tematica = models.CharField(",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelPrimeraSolicitud",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class ModelPrimeraSolicitud(models.Model):\n    tematica = models.CharField(\n        verbose_name='Inscribe la temática a tratar', max_length=1000)\n    LINEAS_INVESTIGACION_CHOICES = [\n        ('IA', 'Inteligencia Artificial'),\n        ('BD', 'Bases de Datos'),\n        ('RS', 'Redes y Seguridad'),\n        ('SI', 'Sistemas de Información'),\n        ('DS', 'Desarrollo de Software'),\n    ]",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelAnteproyecto",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class ModelAnteproyecto(models.Model):\n    user = models.OneToOneField(\n        Usuarios, on_delete=models.CASCADE, related_name='Anteproyecto')\n    nombre_anteproyecto = models.CharField(max_length=200)\n    nombre_integrante1 = models.CharField(max_length=200)\n    nombre_integrante2 = models.CharField(\n        max_length=200, null=True, blank=True)  # Cambio aquí\n    descripcion = models.TextField(\n        max_length=500, null=True, blank=True)  # Cambio aquí\n    carta_presentacion = models.BinaryField(null=True, blank=True)",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ProyectoGrad",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class ProyectoGrado (models.Model):\n    pass\nclass EtapasProyecto (models.Model):\n    pass\n# creacion del modelo mas grande respecto a relaciones con otras aplicaciones\n# Modelo de Observaciones\nclass Observaciones (models.Model):\n    pass",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "EtapasProyect",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class EtapasProyecto (models.Model):\n    pass\n# creacion del modelo mas grande respecto a relaciones con otras aplicaciones\n# Modelo de Observaciones\nclass Observaciones (models.Model):\n    pass",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "Observacione",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class Observaciones (models.Model):\n    pass",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "estudiante.urls",
        "description": "estudiante.urls",
        "peekOfCode": "app_name = 'estudiante'\n# Definicion de las rutas de la aplicacion\nurlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando'),\n    path('', views.principal_estudiante, name='principal_estudiante'),\n    # path('estudiante', views.estudiante, name='estudiante'),\n    #!funcionando\n    path('solicitud', views.solicitud, name='solicitud'),\n    path('info_proyect', views.info_proyect, name='info_proyect'),",
        "detail": "estudiante.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "estudiante.urls",
        "description": "estudiante.urls",
        "peekOfCode": "urlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando'),\n    path('', views.principal_estudiante, name='principal_estudiante'),\n    # path('estudiante', views.estudiante, name='estudiante'),\n    #!funcionando\n    path('solicitud', views.solicitud, name='solicitud'),\n    path('info_proyect', views.info_proyect, name='info_proyect'),\n    path('test_solicitud', views.test_solicitud, name='test_solicitud'),\n]",
        "detail": "estudiante.urls",
        "documentation": {}
    },
    {
        "label": "test_solicitud",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def test_solicitud(request):\n    context = datosusuario(request)\n    # Si el método es POST, procesamos el formulario.\n    if request.method == 'POST':\n        form = FormAnteproyecto(request.POST, request.FILES)\n        if form.is_valid():\n            anteproyecto = form.save(commit=False)\n            anteproyecto.fecha_envio = fecha_actual()\n            anteproyecto.solicitud_enviada = True\n            anteproyecto.user = request.user  # Asigna el usuario actual al campo user",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "devolver_documento_imagen",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def devolver_documento_imagen(documento_binario):\n    documento = base64.b64encode(documento_binario).decode(\n        'utf-8') if documento_binario else ''\n    return documento\n@login_required\ndef datosusuario(request):\n    usuario = request.user\n    imagen = usuario.imagen\n    imagen_convertida = base64.b64encode(\n        imagen).decode('utf-8') if imagen else ''",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "datosusuario",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def datosusuario(request):\n    usuario = request.user\n    imagen = usuario.imagen\n    imagen_convertida = base64.b64encode(\n        imagen).decode('utf-8') if imagen else ''\n    form_editar_usuario = FormEditarUsuario(instance=usuario)\n    form_solicitud = FormAnteproyecto\n    context = {'form_anteproyecto': form_solicitud,\n               'form_config': form_editar_usuario, 'usuario': usuario, 'user_img': imagen_convertida\n               }",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "contenido_anteproyecto",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def contenido_anteproyecto(request):\n    try:\n        content_anteproyecto = ModelAnteproyecto.objects.get(user=request.user)\n        carta_presentacion_binario = content_anteproyecto.carta_presentacion\n        anteproyecto_binario = content_anteproyecto.anteproyecto\n        carta_presentacion = devolver_documento_imagen(\n            carta_presentacion_binario)\n        anteproyecto = devolver_documento_imagen(anteproyecto_binario)\n        context_anteproyecto = {\n            'nombre_anteproyecto': content_anteproyecto.nombre_anteproyecto,",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "principal_estudiante",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def principal_estudiante(request):\n    if request.method == 'POST':\n        editar_usuario(request)\n    else:\n        context = datosusuario(request)\n        return render(request, 'estudiante/base_estudiante.html', context)\n# vista del template para la solicitud\n#!funcionando\n@ login_required\n@ grupo_usuario('Estudiantes')",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "solicitud",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def solicitud(request):\n    if request.method == 'POST':\n        form = FormAnteproyecto(request.POST, request.FILES)\n        if form.is_valid():\n            # Crea una instancia del modelo sin guardarla en la base de datos aún\n            anteproyecto = form.save(commit=False)\n            anteproyecto.fecha_envio = fecha_actual()\n            anteproyecto.solicitud_enviada = True\n            anteproyecto.user = request.user  # Asigna el usuario actual al campo user\n            anteproyecto.save()  # Guarda la instancia del modelo en la base de datos",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "info_proyect",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def info_proyect(request):\n    if request.method == 'POST':\n        context = contenido_anteproyecto(request)\n        return render(request, 'estudiante/Inf_proyect.html', context)\n    else:\n        context = contenido_anteproyecto(request)\n        return render(request, 'estudiante/Inf_proyect.html', context)",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "login.migrations.0001_initial",
        "description": "login.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelError',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "login.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "login.migrations.0002_usuarios_nombre_completo",
        "description": "login.migrations.0002_usuarios_nombre_completo",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='usuarios',\n            name='nombre_completo',\n            field=models.CharField(default='default', max_length=100),\n            preserve_default=False,",
        "detail": "login.migrations.0002_usuarios_nombre_completo",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "login.migrations.0003_alter_usuarios_nombre_completo",
        "description": "login.migrations.0003_alter_usuarios_nombre_completo",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0002_usuarios_nombre_completo'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='usuarios',\n            name='nombre_completo',\n            field=models.CharField(blank=True, max_length=200),\n        ),",
        "detail": "login.migrations.0003_alter_usuarios_nombre_completo",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "login.admin",
        "description": "login.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    add_form = CustomUserCreationForm\n    # formulario para cambiar los datos del usuario desde el panel admin\n    form = CustomUserChangeForm\n    model = Usuarios\n    list_display = ('email', 'nombres', 'apellidos',\n                    'nombre_completo', 'imagen', 'is_staff', 'is_active')\n    list_filter = ('is_staff', 'is_active', 'groups')\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),",
        "detail": "login.admin",
        "documentation": {}
    },
    {
        "label": "ModelErrorAdmin",
        "kind": 6,
        "importPath": "login.admin",
        "description": "login.admin",
        "peekOfCode": "class ModelErrorAdmin(admin.ModelAdmin):\n    list_display = ('estado', 'fecha_hora_error')\nadmin.site.register(ModelError, ModelErrorAdmin)",
        "detail": "login.admin",
        "documentation": {}
    },
    {
        "label": "LoginConfig",
        "kind": 6,
        "importPath": "login.apps",
        "description": "login.apps",
        "peekOfCode": "class LoginConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'login'",
        "detail": "login.apps",
        "documentation": {}
    },
    {
        "label": "CustomUserChangeForm",
        "kind": 6,
        "importPath": "login.forms",
        "description": "login.forms",
        "peekOfCode": "class CustomUserChangeForm(UserChangeForm):\n    class Meta:\n        model = Usuarios\n        fields = ('nombres', 'apellidos', 'email', 'nombre_completo',\n                  'password', 'is_active', 'is_staff', 'groups')\nclass CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = Usuarios\n        fields = ('nombres', 'apellidos', 'email', 'password1', 'password2')\n    def save(self, commit=True):",
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "login.forms",
        "description": "login.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = Usuarios\n        fields = ('nombres', 'apellidos', 'email', 'password1', 'password2')\n    def save(self, commit=True):\n        user = super().save(commit=False)\n        user.is_active = True\n        user.set_password(self.cleaned_data[\"password1\"])\n        user.nombre_completo = f\"{user.nombres} {user.apellidos}\"\n        if commit:",
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "FormRegistro",
        "kind": 6,
        "importPath": "login.forms",
        "description": "login.forms",
        "peekOfCode": "class FormRegistro(UserCreationForm):\n    class Meta:\n        model = Usuarios\n        fields = ('nombres', 'apellidos',\n                  'email', 'password1', 'password2')\n        widgets = {\n            'nombres': forms.TextInput(attrs={'placeholder': 'Digita tus nombres', 'class': 'form-control'}),\n            'apellidos': forms.TextInput(attrs={'placeholder': 'Digita tus apellidos', 'class': 'form-control'}),\n            'email': forms.EmailInput(attrs={'placeholder': 'example@correo.com', 'class': 'form-control'}),\n            'password1': forms.PasswordInput(attrs={",
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "FormEditarUsuario",
        "kind": 6,
        "importPath": "login.forms",
        "description": "login.forms",
        "peekOfCode": "class FormEditarUsuario(forms.ModelForm):\n    imagen_file = forms.ImageField(required=False)\n    current_password = forms.CharField(\n        label='Contraseña actual',\n        widget=forms.PasswordInput(attrs={'class': 'form-control'}),\n        required=False\n    )\n    password1 = forms.CharField(\n        label='Nueva contraseña',\n        widget=forms.PasswordInput(attrs={'class': 'form-control'}),",
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "login.managers",
        "description": "login.managers",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, email, nombres, apellidos, password=None, **extra_fields):\n        if not email:\n            raise ValueError('El email es obligatorio')\n        email = self.normalize_email(email)\n        user = self.model(email=email, nombres=nombres, apellidos=apellidos, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, nombres, apellidos, password=None, **extra_fields):",
        "detail": "login.managers",
        "documentation": {}
    },
    {
        "label": "ModelError",
        "kind": 6,
        "importPath": "login.models",
        "description": "login.models",
        "peekOfCode": "class ModelError(models.Model):\n    estado = models.IntegerField()\n    fecha_hora_error = models.DateTimeField()\nclass Usuarios(AbstractUser):\n    ROLES_CHOICES = (\n        ('estudiante', 'Estudiante'),\n        ('director', 'Director'),\n        ('correspondencia', 'Correspondencia'),\n    )\n    nombres = models.CharField(max_length=100)",
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "kind": 6,
        "importPath": "login.models",
        "description": "login.models",
        "peekOfCode": "class Usuarios(AbstractUser):\n    ROLES_CHOICES = (\n        ('estudiante', 'Estudiante'),\n        ('director', 'Director'),\n        ('correspondencia', 'Correspondencia'),\n    )\n    nombres = models.CharField(max_length=100)\n    apellidos = models.CharField(max_length=100)\n    nombre_completo = models.CharField(max_length=200, blank=True)\n    email = models.EmailField(unique=True)",
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "login.urls",
        "description": "login.urls",
        "peekOfCode": "app_name = 'login'\nurlpatterns = [\n    #  ruta de registro para el patterns de la app\n    path('', views.loginapps, name='loginapps'),\n    path('registro', views.registro, name='registro'),\n    path('editar_usuario', views.editar_usuario, name='editar_usuario'),\n]",
        "detail": "login.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "login.urls",
        "description": "login.urls",
        "peekOfCode": "urlpatterns = [\n    #  ruta de registro para el patterns de la app\n    path('', views.loginapps, name='loginapps'),\n    path('registro', views.registro, name='registro'),\n    path('editar_usuario', views.editar_usuario, name='editar_usuario'),\n]",
        "detail": "login.urls",
        "documentation": {}
    },
    {
        "label": "loginapps",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def loginapps(request):\n    if request.method == 'POST':\n        username = request.POST.get('email')\n        password = request.POST.get('password')\n        print(f\"Username: {username}, Password: {password}\")\n        user = authenticate(request, username=username, password=password)\n        print(f\"Authenticated User: {user}\")\n        if user is not None:\n            print(\"User is authenticated\")\n            auth_login(request, user)",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "registro",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def registro(request):\n    # # ejemplo de uso de mensajes\n    # messages.success(request, 'Operación exitosa.')\n    # # Agregar un mensaje de error\n    # messages.error(request, 'Hubo un error en la operación.')\n    # # Agregar un mensaje de advertencia\n    # messages.warning(request, 'Advertencia: Verifica los detalles.')\n    # # Agregar un mensaje informativo\n    # messages.info(request, 'Información: Revisa la sección de ayuda.')\n    if request.method == 'POST':",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def editar_usuario(request):\n    usuario = request.user\n    # recuperacion de la imagen propia del usuaario en formato binario\n    # print(imagen, 'esta es la imagen')\n    imagen = usuario.imagen\n    imagen_convertida = base64.b64encode(\n        imagen).decode('utf-8') if imagen else ''\n    if request.method == 'POST':\n        form = FormEditarUsuario(request.POST, request.FILES, instance=usuario)\n        if form.is_valid():",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "grupo_usuario",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.decoradores",
        "description": "plataform_CIGAP.utils.decoradores",
        "peekOfCode": "def grupo_usuario(nombre_grupo):\n    def decorador(view):\n        def view_envuelta(request, *args, **kwargs):\n            if request.user.is_authenticated:\n                if request.user.groups.filter(name=nombre_grupo).exists():\n                    return view(request, *args, **kwargs)\n                else:\n                    # en este decorador puedo manejar una vista de permisos\n                    return handler404\n            else:",
        "detail": "plataform_CIGAP.utils.decoradores",
        "documentation": {}
    },
    {
        "label": "fecha_actual",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.funcionalidades_fechas",
        "description": "plataform_CIGAP.utils.funcionalidades_fechas",
        "peekOfCode": "def fecha_actual():\n    bogota_zone = pytz.timezone('America/Bogota')\n    bogota_time = datetime.datetime.now(bogota_zone)\n    bogota_timestr = bogota_time.strftime('%Y-%m-%d %H:%M:%S')\n    fecha_actual = bogota_timestr\n    return fecha_actual\nprint(fecha_actual())",
        "detail": "plataform_CIGAP.utils.funcionalidades_fechas",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "plataform_CIGAP.asgi",
        "description": "plataform_CIGAP.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "plataform_CIGAP.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-fk&953!oxm!!jd)td-gspnj!(gem1*-&bk&hrvizjw&$u^9q$^'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-fk&953!oxm!!jd)td-gspnj!(gem1*-&bk&hrvizjw&$u^9q$^'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'correspondencia',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'correspondencia',\n    'director',\n    'estudiante',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'plataform_CIGAP.urls'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "ROOT_URLCONF = 'plataform_CIGAP.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        # Directorio global de templates\n        'DIRS': [os.path.join(BASE_DIR, 'plataform_CIGAP', 'templates')],\n        # 'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        # Directorio global de templates\n        'DIRS': [os.path.join(BASE_DIR, 'plataform_CIGAP', 'templates')],\n        # 'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "WSGI_APPLICATION = 'plataform_CIGAP.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Apartado de autenticaciones\nAUTH_USER_MODEL = 'login.Usuarios'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Apartado de autenticaciones\nAUTH_USER_MODEL = 'login.Usuarios'\n# cambiar el lenguaje del codigo a español en el navegador",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Apartado de autenticaciones\nAUTH_USER_MODEL = 'login.Usuarios'\n# cambiar el lenguaje del codigo a español en el navegador\nLANGUAGE_CODE = 'es'\n# reajustes del direcciones depues del login\n# LOGIN_URL = '/'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Apartado de autenticaciones\nAUTH_USER_MODEL = 'login.Usuarios'\n# cambiar el lenguaje del codigo a español en el navegador\nLANGUAGE_CODE = 'es'\n# reajustes del direcciones depues del login\n# LOGIN_URL = '/'\n# LOGIN_REDIRECT_URL = '/estudiante/'\n# LOGOUT_REDIRECT_URL = '/'\n# autenticaciones de contraseña",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'login.Usuarios'\n# cambiar el lenguaje del codigo a español en el navegador\nLANGUAGE_CODE = 'es'\n# reajustes del direcciones depues del login\n# LOGIN_URL = '/'\n# LOGIN_REDIRECT_URL = '/estudiante/'\n# LOGOUT_REDIRECT_URL = '/'\n# autenticaciones de contraseña\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "LANGUAGE_CODE = 'es'\n# reajustes del direcciones depues del login\n# LOGIN_URL = '/'\n# LOGIN_REDIRECT_URL = '/estudiante/'\n# LOGOUT_REDIRECT_URL = '/'\n# autenticaciones de contraseña\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# manejo de errores",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# manejo de errores\nCSRF_FAILURE_VIEW = 'plataform_CIGAP.views.csrf_failure'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_FAILURE_VIEW",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "CSRF_FAILURE_VIEW = 'plataform_CIGAP.views.csrf_failure'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "plataform_CIGAP.urls",
        "description": "plataform_CIGAP.urls",
        "peekOfCode": "urlpatterns = [\n    #  ruta de registro para el patterns de la app\n    # path('registro/', views.registro, name='registro'),\n    # path('', views.loginapps, name='loginapps'),\n    path('admin/', admin.site.urls),\n    path('estudiante/', include('estudiante.urls')),\n    path('director/', include('director.urls')),\n    path('correspondencia/', include('correspondencia.urls')),\n    path('', include('login.urls')),\n    # vista y url del logout",
        "detail": "plataform_CIGAP.urls",
        "documentation": {}
    },
    {
        "label": "handler400",
        "kind": 5,
        "importPath": "plataform_CIGAP.urls",
        "description": "plataform_CIGAP.urls",
        "peekOfCode": "handler400 = 'plataform_CIGAP.views.handler400'\nhandler500 = 'plataform_CIGAP.views.handler500'\n# handler401 = 'plataform_CIGAP.views.handler401'\n# handler403 = 'plataform_CIGAP.views.handler403'\nhandler404 = 'plataform_CIGAP.views.handler404'",
        "detail": "plataform_CIGAP.urls",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 5,
        "importPath": "plataform_CIGAP.urls",
        "description": "plataform_CIGAP.urls",
        "peekOfCode": "handler500 = 'plataform_CIGAP.views.handler500'\n# handler401 = 'plataform_CIGAP.views.handler401'\n# handler403 = 'plataform_CIGAP.views.handler403'\nhandler404 = 'plataform_CIGAP.views.handler404'",
        "detail": "plataform_CIGAP.urls",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "plataform_CIGAP.urls",
        "description": "plataform_CIGAP.urls",
        "peekOfCode": "handler404 = 'plataform_CIGAP.views.handler404'",
        "detail": "plataform_CIGAP.urls",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def logout_user(request):\n    logout(request)\n    return redirect('login:loginapps')\n# def errors(request):\n#     return render(request, 'errors.html')\nerrores = {\n    '404': {\n        'num_error': '404',\n        'mensaje': 'La página solicitada <b>no fue encontrada</b>. Esto puede suceder si la <b>URL está mal escrita</b>, si la página <b>ha sido eliminada o si se esta intentando <b>acceder sin sesión</b> tomando una nueva redirección de URL.</b>'\n    },",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def handler404(request, exception):\n    return render(request, 'errors.html', errores['404'])\ndef handler400(request, exception):\n    return render(request, 'errors.html', errores['400'])\n# manejo del token\n# recordar que como este es personalizado respecto al error del token, se instancion en el settings\ndef csrf_failure(request, reason=\"\"):\n    return render(request, 'errors.html', errores['403'], status=403)\n# def handler403(request, exception=None):\n#     return render(request, 'errors.html', errores['403'], status=403)",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "handler400",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def handler400(request, exception):\n    return render(request, 'errors.html', errores['400'])\n# manejo del token\n# recordar que como este es personalizado respecto al error del token, se instancion en el settings\ndef csrf_failure(request, reason=\"\"):\n    return render(request, 'errors.html', errores['403'], status=403)\n# def handler403(request, exception=None):\n#     return render(request, 'errors.html', errores['403'], status=403)\n# esta no maneja excepcion\ndef handler500(request):",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "csrf_failure",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def csrf_failure(request, reason=\"\"):\n    return render(request, 'errors.html', errores['403'], status=403)\n# def handler403(request, exception=None):\n#     return render(request, 'errors.html', errores['403'], status=403)\n# esta no maneja excepcion\ndef handler500(request):\n    return render(request, 'errors.html', errores['500'])\n# def handler401(request,exception):\n#     return render(request, 'errors.html', errores['401'])\ndef handler500(request):",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def handler500(request):\n    return render(request, 'errors.html', errores['500'])\n# def handler401(request,exception):\n#     return render(request, 'errors.html', errores['401'])\ndef handler500(request):\n    return render(request, 'errors.html', errores['500'])\n# def handler401(request,exception):\n#     return render(request, 'errors.html', errores['401'])\ndef submit_error(request):\n    if request.method == 'POST':",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def handler500(request):\n    return render(request, 'errors.html', errores['500'])\n# def handler401(request,exception):\n#     return render(request, 'errors.html', errores['401'])\ndef submit_error(request):\n    if request.method == 'POST':\n        codigo = request.POST.get('estado')\n        print(f'Estado recibido: {codigo}')\n        model = ModelError(\n            estado=int(codigo),",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "submit_error",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def submit_error(request):\n    if request.method == 'POST':\n        codigo = request.POST.get('estado')\n        print(f'Estado recibido: {codigo}')\n        model = ModelError(\n            estado=int(codigo),\n            fecha_hora_error=datetime.datetime.now()\n        )\n        model.save()\n        logout(request)",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "errores",
        "kind": 5,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "errores = {\n    '404': {\n        'num_error': '404',\n        'mensaje': 'La página solicitada <b>no fue encontrada</b>. Esto puede suceder si la <b>URL está mal escrita</b>, si la página <b>ha sido eliminada o si se esta intentando <b>acceder sin sesión</b> tomando una nueva redirección de URL.</b>'\n    },\n    '401': {\n        'num_error': '401',\n        'mensaje': '<b>Es necesario autenticarse</b> para acceder a esta página. Por favor, <b>inicia sesión</b> e inténtalo de nuevo.'\n    },\n    '400': {",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "plataform_CIGAP.wsgi",
        "description": "plataform_CIGAP.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "plataform_CIGAP.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'plataform_CIGAP.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "nombre_completo",
        "kind": 5,
        "importPath": "nombres",
        "description": "nombres",
        "peekOfCode": "nombre_completo = nombres+' '+apellidos\nprint(nombre_completo)",
        "detail": "nombres",
        "documentation": {}
    }
]
[
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "format_html",
        "importPath": "django.utils.html",
        "description": "django.utils.html",
        "isExtraImport": true,
        "detail": "django.utils.html",
        "documentation": {}
    },
    {
        "label": "base64",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "base64",
        "description": "base64",
        "detail": "base64",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {}
    },
    {
        "label": "ModelAnteproyecto",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelProyectoFinal",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelAsignacionJurados",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelAnteproyecto",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelProyectoFinal",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelProyectoFinal",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelAsignacionJurados",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelAnteproyecto",
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "isExtraImport": true,
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "ModelError",
        "importPath": "login.models",
        "description": "login.models",
        "isExtraImport": true,
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponsePermanentRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponsePermanentRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponsePermanentRedirect",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "Q",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "importPath": "login.views",
        "description": "login.views",
        "isExtraImport": true,
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "FormEditarUsuario",
        "importPath": "login.forms",
        "description": "login.forms",
        "isExtraImport": true,
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "FormEditarUsuario",
        "importPath": "login.forms",
        "description": "login.forms",
        "isExtraImport": true,
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "FormEditarUsuario",
        "importPath": "login.forms",
        "description": "login.forms",
        "isExtraImport": true,
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "grupo_usuario",
        "importPath": "plataform_CIGAP.utils.decoradores",
        "description": "plataform_CIGAP.utils.decoradores",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.decoradores",
        "documentation": {}
    },
    {
        "label": "grupo_usuario",
        "importPath": "plataform_CIGAP.utils.decoradores",
        "description": "plataform_CIGAP.utils.decoradores",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.decoradores",
        "documentation": {}
    },
    {
        "label": "grupo_usuario",
        "importPath": "plataform_CIGAP.utils.decoradores",
        "description": "plataform_CIGAP.utils.decoradores",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.decoradores",
        "documentation": {}
    },
    {
        "label": "recuperar_num_proyectos_terminados",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_num_proyectos_pendientes",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_num_solicitudes",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_num_formatos_comite",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_num_respuestas",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_proyectos_pendientes",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_proyectos_finalizados",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_proyecto_finalizado",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_proyecto_actual",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitudes_especiales_proyecto",
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "fecha_actual",
        "importPath": "plataform_CIGAP.utils.funcionalidades_fechas",
        "description": "plataform_CIGAP.utils.funcionalidades_fechas",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.funcionalidades_fechas",
        "documentation": {}
    },
    {
        "label": "fecha_actual",
        "importPath": "plataform_CIGAP.utils.funcionalidades_fechas",
        "description": "plataform_CIGAP.utils.funcionalidades_fechas",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.funcionalidades_fechas",
        "documentation": {}
    },
    {
        "label": "fecha_actual",
        "importPath": "plataform_CIGAP.utils.funcionalidades_fechas",
        "description": "plataform_CIGAP.utils.funcionalidades_fechas",
        "isExtraImport": true,
        "detail": "plataform_CIGAP.utils.funcionalidades_fechas",
        "documentation": {}
    },
    {
        "label": "ModelRetroalimentaciones",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelSolicitudes",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelAsignacionJurados",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelDocumentos",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelRetroalimentaciones",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelDocumentos",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelSolicitudes",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelInformacionEntregaFinal",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelRetroalimentaciones",
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "isExtraImport": true,
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "FormAnteproyecto",
        "importPath": "estudiante.forms",
        "description": "estudiante.forms",
        "isExtraImport": true,
        "detail": "estudiante.forms",
        "documentation": {}
    },
    {
        "label": "FormProyectoFinal",
        "importPath": "estudiante.forms",
        "description": "estudiante.forms",
        "isExtraImport": true,
        "detail": "estudiante.forms",
        "documentation": {}
    },
    {
        "label": "FormActualizarProyectoFinal",
        "importPath": "estudiante.forms",
        "description": "estudiante.forms",
        "isExtraImport": true,
        "detail": "estudiante.forms",
        "documentation": {}
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AbstractUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "runpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "runpy",
        "description": "runpy",
        "detail": "runpy",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "MinValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "MaxValueValidator",
        "importPath": "django.core.validators",
        "description": "django.core.validators",
        "isExtraImport": true,
        "detail": "django.core.validators",
        "documentation": {}
    },
    {
        "label": "ObjectDoesNotExist",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {}
    },
    {
        "label": "FormSolicitudes",
        "importPath": "correspondencia.forms",
        "description": "correspondencia.forms",
        "isExtraImport": true,
        "detail": "correspondencia.forms",
        "documentation": {}
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {}
    },
    {
        "label": "UserAdmin",
        "importPath": "django.contrib.auth.admin",
        "description": "django.contrib.auth.admin",
        "isExtraImport": true,
        "detail": "django.contrib.auth.admin",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserCreationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "UserChangeForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "AuthenticationForm",
        "importPath": "django.contrib.auth.forms",
        "description": "django.contrib.auth.forms",
        "isExtraImport": true,
        "detail": "django.contrib.auth.forms",
        "documentation": {}
    },
    {
        "label": "pytz",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytz",
        "description": "pytz",
        "detail": "pytz",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "director.models",
        "description": "director.models",
        "isExtraImport": true,
        "detail": "director.models",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "csrf_failure",
        "importPath": "django.views.csrf",
        "description": "django.views.csrf",
        "isExtraImport": true,
        "detail": "django.views.csrf",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0001_initial",
        "description": "correspondencia.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('estudiante', '0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelRetroalimentacionesAnteproyecto',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "correspondencia.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0002_modelretroalimentacionesanteproyecto_revs_dadas",
        "description": "correspondencia.migrations.0002_modelretroalimentacionesanteproyecto_revs_dadas",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modelretroalimentacionesanteproyecto',\n            name='revs_dadas',\n            field=models.IntegerField(blank=True, null=True),\n        ),",
        "detail": "correspondencia.migrations.0002_modelretroalimentacionesanteproyecto_revs_dadas",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0003_alter_modelretroalimentacionesanteproyecto_retroalimentacion",
        "description": "correspondencia.migrations.0003_alter_modelretroalimentacionesanteproyecto_retroalimentacion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0002_modelretroalimentacionesanteproyecto_revs_dadas'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelretroalimentacionesanteproyecto',\n            name='retroalimentacion',\n            field=models.TextField(max_length=10000),\n        ),",
        "detail": "correspondencia.migrations.0003_alter_modelretroalimentacionesanteproyecto_retroalimentacion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0004_modelasignacionjurados_modelretroalimentaciones_and_more",
        "description": "correspondencia.migrations.0004_modelasignacionjurados_modelretroalimentaciones_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0003_alter_modelretroalimentacionesanteproyecto_retroalimentacion'),\n        ('estudiante', '0012_modelproyectofinal_delete_estudiante_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelAsignacionJurados',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "correspondencia.migrations.0004_modelasignacionjurados_modelretroalimentaciones_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0005_modelinformacionentregafinal_and_more",
        "description": "correspondencia.migrations.0005_modelinformacionentregafinal_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0004_modelasignacionjurados_modelretroalimentaciones_and_more'),\n        ('estudiante', '0012_modelproyectofinal_delete_estudiante_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelInformacionEntregaFinal',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "correspondencia.migrations.0005_modelinformacionentregafinal_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0006_alter_modelasignacionjurados_proyecto_final_and_more",
        "description": "correspondencia.migrations.0006_alter_modelasignacionjurados_proyecto_final_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0005_modelinformacionentregafinal_and_more'),\n        ('estudiante', '0014_alter_modelanteproyecto_user_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelasignacionjurados',\n            name='proyecto_final',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Asignacion_Jurados', to='estudiante.modelproyectofinal'),",
        "detail": "correspondencia.migrations.0006_alter_modelasignacionjurados_proyecto_final_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0007_alter_modelretroalimentaciones_estado",
        "description": "correspondencia.migrations.0007_alter_modelretroalimentaciones_estado",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0006_alter_modelasignacionjurados_proyecto_final_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelretroalimentaciones',\n            name='estado',\n            field=models.CharField(choices=[('Aprobado', 'Aprobado'), ('Aprobado_con_correcciones', 'Aprobado con correcciones'), ('Rechazado', 'Rechazado')], default='aprobado', max_length=25),\n        ),",
        "detail": "correspondencia.migrations.0007_alter_modelretroalimentaciones_estado",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0008_modelsolicitudes",
        "description": "correspondencia.migrations.0008_modelsolicitudes",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0007_alter_modelretroalimentaciones_estado'),\n        ('estudiante', '0016_rename_coodirector_modelanteproyecto_codirector'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelSolicitudes',\n            fields=[",
        "detail": "correspondencia.migrations.0008_modelsolicitudes",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0009_modelsolicitudes_estado_and_more",
        "description": "correspondencia.migrations.0009_modelsolicitudes_estado_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0008_modelsolicitudes'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modelsolicitudes',\n            name='estado',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "correspondencia.migrations.0009_modelsolicitudes_estado_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0010_alter_modelasignacionjurados_proyecto_final_and_more",
        "description": "correspondencia.migrations.0010_alter_modelasignacionjurados_proyecto_final_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0009_modelsolicitudes_estado_and_more'),\n        ('estudiante', '0019_alter_modelproyectofinal_anteproyecto'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelasignacionjurados',\n            name='proyecto_final',",
        "detail": "correspondencia.migrations.0010_alter_modelasignacionjurados_proyecto_final_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0011_rename_fecha_sustentacion_modelasignacionjurados_echa_sustentacion",
        "description": "correspondencia.migrations.0011_rename_fecha_sustentacion_modelasignacionjurados_echa_sustentacion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0010_alter_modelasignacionjurados_proyecto_final_and_more'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='modelasignacionjurados',\n            old_name='fecha_sustentacion',\n            new_name='echa_sustentacion',\n        ),",
        "detail": "correspondencia.migrations.0011_rename_fecha_sustentacion_modelasignacionjurados_echa_sustentacion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0012_rename_echa_sustentacion_modelasignacionjurados_fecha_sustentacion",
        "description": "correspondencia.migrations.0012_rename_echa_sustentacion_modelasignacionjurados_fecha_sustentacion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0011_rename_fecha_sustentacion_modelasignacionjurados_echa_sustentacion'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='modelasignacionjurados',\n            old_name='echa_sustentacion',\n            new_name='fecha_sustentacion',\n        ),",
        "detail": "correspondencia.migrations.0012_rename_echa_sustentacion_modelasignacionjurados_fecha_sustentacion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0013_alter_modelasignacionjurados_fecha_sustentacion",
        "description": "correspondencia.migrations.0013_alter_modelasignacionjurados_fecha_sustentacion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0012_rename_echa_sustentacion_modelasignacionjurados_fecha_sustentacion'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelasignacionjurados',\n            name='fecha_sustentacion',\n            field=models.DateField(max_length=50),\n        ),",
        "detail": "correspondencia.migrations.0013_alter_modelasignacionjurados_fecha_sustentacion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0014_alter_modelretroalimentaciones_estado",
        "description": "correspondencia.migrations.0014_alter_modelretroalimentaciones_estado",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0013_alter_modelasignacionjurados_fecha_sustentacion'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelretroalimentaciones',\n            name='estado',\n            field=models.CharField(choices=[('Aprobado', 'Aprobado'), ('Rechazado', 'Rechazado')], default='aprobado', max_length=25),\n        ),",
        "detail": "correspondencia.migrations.0014_alter_modelretroalimentaciones_estado",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0015_remove_modelretroalimentaciones_jurado",
        "description": "correspondencia.migrations.0015_remove_modelretroalimentaciones_jurado",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0014_alter_modelretroalimentaciones_estado'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='modelretroalimentaciones',\n            name='jurado',\n        ),\n    ]",
        "detail": "correspondencia.migrations.0015_remove_modelretroalimentaciones_jurado",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0016_alter_modelinformacionentregafinal_jurado_and_more",
        "description": "correspondencia.migrations.0016_alter_modelinformacionentregafinal_jurado_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0015_remove_modelretroalimentaciones_jurado'),\n        ('estudiante', '0020_modelasignacionjurados_modelproyectofinal_jurado'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelinformacionentregafinal',\n            name='jurado',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Informacion_Entrega_Final', to='estudiante.modelasignacionjurados'),",
        "detail": "correspondencia.migrations.0016_alter_modelinformacionentregafinal_jurado_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0017_alter_modelsolicitudes_relacionado_con",
        "description": "correspondencia.migrations.0017_alter_modelsolicitudes_relacionado_con",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0016_alter_modelinformacionentregafinal_jurado_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelsolicitudes',\n            name='relacionado_con',\n            field=models.CharField(choices=[('Anteproyecto', 'Anteproyecto'), ('Proyecto_final', 'Proyecto Final')], max_length=255),\n        ),",
        "detail": "correspondencia.migrations.0017_alter_modelsolicitudes_relacionado_con",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0018_modeldocumentos",
        "description": "correspondencia.migrations.0018_modeldocumentos",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0017_alter_modelsolicitudes_relacionado_con'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelDocumentos',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nombre_documento', models.CharField(max_length=100)),",
        "detail": "correspondencia.migrations.0018_modeldocumentos",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0019_modeldocumentos_descripcion",
        "description": "correspondencia.migrations.0019_modeldocumentos_descripcion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0018_modeldocumentos'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modeldocumentos',\n            name='descripcion',\n            field=models.CharField(default='este documento', max_length=500),\n            preserve_default=False,",
        "detail": "correspondencia.migrations.0019_modeldocumentos_descripcion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "correspondencia.migrations.0020_alter_modelinformacionentregafinal_anteproyecto_and_more",
        "description": "correspondencia.migrations.0020_alter_modelinformacionentregafinal_anteproyecto_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('correspondencia', '0019_modeldocumentos_descripcion'),\n        ('estudiante', '0021_alter_modelproyectofinal_anteproyecto'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelinformacionentregafinal',\n            name='anteproyecto',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Informacion_Entrega_Final', to='estudiante.modelanteproyecto'),",
        "detail": "correspondencia.migrations.0020_alter_modelinformacionentregafinal_anteproyecto_and_more",
        "documentation": {}
    },
    {
        "label": "ModelRetroalimentacionesAdmin",
        "kind": 6,
        "importPath": "correspondencia.admin",
        "description": "correspondencia.admin",
        "peekOfCode": "class ModelRetroalimentacionesAdmin(admin.ModelAdmin):\n    list_display = ('anteproyecto', 'proyecto_final', 'retroalimentacion', 'fecha_retroalimentacion',\n                    'estado', 'revs_dadas', 'doc_retroalimentacion_link')\n    def doc_retroalimentacion_link(self, obj):\n        if obj.doc_retroalimentacion:\n            if isinstance(obj.doc_retroalimentacion, bytes):\n                base64_data = base64.b64encode(\n                    obj.doc_retroalimentacion).decode('utf8')\n                url = f'data:application/octet-stream;base64,{base64_data}'\n                if obj.anteproyecto:",
        "detail": "correspondencia.admin",
        "documentation": {}
    },
    {
        "label": "CorrespondenciaConfig",
        "kind": 6,
        "importPath": "correspondencia.apps",
        "description": "correspondencia.apps",
        "peekOfCode": "class CorrespondenciaConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'correspondencia'",
        "detail": "correspondencia.apps",
        "documentation": {}
    },
    {
        "label": "FormRetroalimentacionAnteproyecto",
        "kind": 6,
        "importPath": "correspondencia.forms",
        "description": "correspondencia.forms",
        "peekOfCode": "class FormRetroalimentacionAnteproyecto(forms.ModelForm):\n    doc_retroalimentacion_convert = forms.FileField(required=True)\n    class Meta:\n        model = ModelRetroalimentaciones\n        fields = ('retroalimentacion',\n                  'doc_retroalimentacion_convert', 'estado')\n    def save(self, commit=True):\n        retroalimentacion = super().save(commit=False)\n        retroalimentacion.retroalimentacion = self.cleaned_data['retroalimentacion']\n        retroalimentacion.doc_retroalimentacion = self.cleaned_data['doc_retroalimentacion_convert'].read(",
        "detail": "correspondencia.forms",
        "documentation": {}
    },
    {
        "label": "FormRetroalimentacionProyecto",
        "kind": 6,
        "importPath": "correspondencia.forms",
        "description": "correspondencia.forms",
        "peekOfCode": "class FormRetroalimentacionProyecto(forms.ModelForm):\n    doc_retroalimentacion_convert = forms.FileField(required=True)\n    class Meta:\n        model = ModelRetroalimentaciones\n        fields = ('retroalimentacion',\n                  'doc_retroalimentacion_convert', 'estado')\n        estado = forms.ChoiceField(\n            widget=forms.CheckboxSelectMultiple(attrs={'id': 'element_estado'})\n        )\n    def save(self, commit=True):",
        "detail": "correspondencia.forms",
        "documentation": {}
    },
    {
        "label": "FormSolicitudes",
        "kind": 6,
        "importPath": "correspondencia.forms",
        "description": "correspondencia.forms",
        "peekOfCode": "class FormSolicitudes(forms.ModelForm):\n    documento_soporte_convert = forms.FileField(required=True)\n    class Meta:\n        model = ModelSolicitudes\n        fields = [\n            'relacionado_con',\n            'retroalimentaciones',\n            'tipo_solicitud',\n            'motivo_solicitud',\n            'documento_soporte_convert',",
        "detail": "correspondencia.forms",
        "documentation": {}
    },
    {
        "label": "FormJurados",
        "kind": 6,
        "importPath": "correspondencia.forms",
        "description": "correspondencia.forms",
        "peekOfCode": "class FormJurados(forms.ModelForm):\n    nombre_jurado = forms.CharField(widget=forms.Textarea)\n    class Meta:\n        model = ModelAsignacionJurados\n        fields = [\n            'nombre_jurado',\n        ]\n    def save(self, commit=False):\n        jurados = super().save(commit=True)\n        if commit:",
        "detail": "correspondencia.forms",
        "documentation": {}
    },
    {
        "label": "FormDocumentos",
        "kind": 6,
        "importPath": "correspondencia.forms",
        "description": "correspondencia.forms",
        "peekOfCode": "class FormDocumentos(forms.ModelForm):\n    documento_convert = forms.FileField(required=False)\n    class Meta:\n        model = ModelDocumentos\n        fields = ['nombre_documento', 'descripcion', 'version', 'documento_convert']\n    def __init__(self, *args, **kwargs):\n        super(FormDocumentos, self).__init__(*args, **kwargs)\n        if self.instance and self.instance.pk:\n            self.fields['documento_convert'].required = False\n    def save(self, commit=True):",
        "detail": "correspondencia.forms",
        "documentation": {}
    },
    {
        "label": "ModelRetroalimentaciones",
        "kind": 6,
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "peekOfCode": "class ModelRetroalimentaciones(models.Model):\n    ESTADOS_CHOICES = [\n        ('Aprobado', 'Aprobado'),\n        ('Rechazado', 'Rechazado'),\n    ]\n    anteproyecto = models.ForeignKey(\n        ModelAnteproyecto, on_delete=models.CASCADE, related_name='Retroalimentaciones', blank=True, null=True)\n    proyecto_final = models.ForeignKey(\n        ModelProyectoFinal, on_delete=models.SET_NULL, related_name='Retroalimentaciones', blank=True, null=True)\n    retroalimentacion = models.TextField(",
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelInformacionEntregaFinal",
        "kind": 6,
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "peekOfCode": "class ModelInformacionEntregaFinal(models.Model):\n    anteproyecto = models.ForeignKey(\n        ModelAnteproyecto, on_delete=models.CASCADE, related_name='Informacion_Entrega_Final', blank=True, null=True)\n    proyecto_final = models.ForeignKey(\n        ModelProyectoFinal, on_delete=models.SET_NULL, related_name='Informacion_Entrega_Final', blank=True, null=True)\n    jurado = models.ForeignKey(\n        ModelAsignacionJurados, on_delete=models.SET_NULL, related_name='Informacion_Entrega_Final', blank=True, null=True)\n    retroalimentaciones = models.ForeignKey(\n        ModelRetroalimentaciones, on_delete=models.SET_NULL, related_name='Informacion_Entrega_Final', blank=True, null=True)\n# creacion del modelo de solicitudes para el cambio de infromacion respecto al proyecto",
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelSolicitudes",
        "kind": 6,
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "peekOfCode": "class ModelSolicitudes(models.Model):\n    TIPO_SOLICITUD = [\n        ('cambio_nombre', 'Cambio de nombre del proyecto'),\n        ('ajuste_integrantes', 'Ajuste de integrantes del proyecto'),\n        ('seccion_derechos', 'Sección de derechos del proyecto'),\n        ('otro', 'Otro'),\n    ]\n    RELACIONADO_CON_CHOICES = [\n        ('Anteproyecto', 'Anteproyecto'),\n        ('Proyecto_final', 'Proyecto Final'),",
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "ModelDocumentos",
        "kind": 6,
        "importPath": "correspondencia.models",
        "description": "correspondencia.models",
        "peekOfCode": "class ModelDocumentos(models.Model):\n    nombre_documento = models.CharField(max_length=100)\n    version = models.CharField(max_length=50)\n    descripcion = models.CharField(max_length=500)\n    documento = models.BinaryField(blank=True, null=True)\n    fecha_cargue = models.CharField(max_length=50)",
        "detail": "correspondencia.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "correspondencia.urls",
        "description": "correspondencia.urls",
        "peekOfCode": "app_name = 'correspondencia'\n# Definicion de las rutas de la aplicacion\nurlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando')\n    path('', views.principal_correspondencia,\n         name='principal_correspondencia'),\n    ###################################################################################################\n    path('solicitudes', views.solicitudes, name='solicitudes'),\n    path('solicitudes_anteproyectos', views.solicitudes_anteproyectos,",
        "detail": "correspondencia.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "correspondencia.urls",
        "description": "correspondencia.urls",
        "peekOfCode": "urlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando')\n    path('', views.principal_correspondencia,\n         name='principal_correspondencia'),\n    ###################################################################################################\n    path('solicitudes', views.solicitudes, name='solicitudes'),\n    path('solicitudes_anteproyectos', views.solicitudes_anteproyectos,\n         name='solicitudes_anteproyectos'),\n    path('solicitudes_proyectos_finales', views.solicitudes_proyectos_finales,",
        "detail": "correspondencia.urls",
        "documentation": {}
    },
    {
        "label": "recuperar_anteproyectos_pendientes",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_anteproyectos_pendientes():\n    anteproyectos_pendientes = ModelAnteproyecto.objects.filter(estado=False)\n    return anteproyectos_pendientes\ndef recuperar_proyectos_finales_pendientes():\n    proyectos_finales_pendientes = ModelProyectoFinal.objects.filter(\n        estado=False)\n    return proyectos_finales_pendientes\ndef recuperar_proyectos_finales_finalizados():\n    proyectos_finales_finalizados = ModelProyectoFinal.objects.filter(\n        estado=True)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_proyectos_finales_pendientes",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_proyectos_finales_pendientes():\n    proyectos_finales_pendientes = ModelProyectoFinal.objects.filter(\n        estado=False)\n    return proyectos_finales_pendientes\ndef recuperar_proyectos_finales_finalizados():\n    proyectos_finales_finalizados = ModelProyectoFinal.objects.filter(\n        estado=True)\n    return proyectos_finales_finalizados\ndef recuperar_asignaciones_jurados():\n    pass",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_proyectos_finales_finalizados",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_proyectos_finales_finalizados():\n    proyectos_finales_finalizados = ModelProyectoFinal.objects.filter(\n        estado=True)\n    return proyectos_finales_finalizados\ndef recuperar_asignaciones_jurados():\n    pass\ndef recuperar_solicitudes_especiales_pendientes():\n    solicitudes_pendientes = ModelSolicitudes.objects.filter(\n        Q(estado=False) & (Q(tipo_solicitud='cambio_nombre') | Q(\n            tipo_solicitud='ajuste_integrantes') | Q(tipo_solicitud='seccion_derechos') | Q(tipo_solicitud='otro'))",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_asignaciones_jurados",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_asignaciones_jurados():\n    pass\ndef recuperar_solicitudes_especiales_pendientes():\n    solicitudes_pendientes = ModelSolicitudes.objects.filter(\n        Q(estado=False) & (Q(tipo_solicitud='cambio_nombre') | Q(\n            tipo_solicitud='ajuste_integrantes') | Q(tipo_solicitud='seccion_derechos') | Q(tipo_solicitud='otro'))\n    )\n    return solicitudes_pendientes\ndef recuperar_solicitud_especial_pendiente(id):\n    solicitud_pendiente = ModelSolicitudes.objects.get(",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitudes_especiales_pendientes",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_solicitudes_especiales_pendientes():\n    solicitudes_pendientes = ModelSolicitudes.objects.filter(\n        Q(estado=False) & (Q(tipo_solicitud='cambio_nombre') | Q(\n            tipo_solicitud='ajuste_integrantes') | Q(tipo_solicitud='seccion_derechos') | Q(tipo_solicitud='otro'))\n    )\n    return solicitudes_pendientes\ndef recuperar_solicitud_especial_pendiente(id):\n    solicitud_pendiente = ModelSolicitudes.objects.get(\n        id=id) if ModelSolicitudes.objects.filter(id=id).exists() else None\n    return solicitud_pendiente",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitud_especial_pendiente",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_solicitud_especial_pendiente(id):\n    solicitud_pendiente = ModelSolicitudes.objects.get(\n        id=id) if ModelSolicitudes.objects.filter(id=id).exists() else None\n    return solicitud_pendiente\n# funcion para traer los anteproyectos\ndef recuperar_anteproyectos():\n    anteproyectos = ModelAnteproyecto.objects.all()\n    return anteproyectos\n# funcion para recuperar los anteproyectos que aun no estan aprovados\ndef recuperar_anteproyectos_pendientes():",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_anteproyectos",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_anteproyectos():\n    anteproyectos = ModelAnteproyecto.objects.all()\n    return anteproyectos\n# funcion para recuperar los anteproyectos que aun no estan aprovados\ndef recuperar_anteproyectos_pendientes():\n    anteproyectos = ModelAnteproyecto.objects.filter(estado=False)\n    return anteproyectos\n# funcion para traer un anteproyecto en especifico\ndef recuperar_anteproyecto(nombre):\n    anteproyecto = ModelAnteproyecto.objects.get(nombre_anteproyecto=nombre) if ModelAnteproyecto.objects.filter(",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_anteproyectos_pendientes",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_anteproyectos_pendientes():\n    anteproyectos = ModelAnteproyecto.objects.filter(estado=False)\n    return anteproyectos\n# funcion para traer un anteproyecto en especifico\ndef recuperar_anteproyecto(nombre):\n    anteproyecto = ModelAnteproyecto.objects.get(nombre_anteproyecto=nombre) if ModelAnteproyecto.objects.filter(\n        nombre_anteproyecto=nombre).exists() else None\n    return anteproyecto\n# funcion para recuperar un proyecto Final\ndef recuperar_proyecto_final(anteproyecto):",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_anteproyecto",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_anteproyecto(nombre):\n    anteproyecto = ModelAnteproyecto.objects.get(nombre_anteproyecto=nombre) if ModelAnteproyecto.objects.filter(\n        nombre_anteproyecto=nombre).exists() else None\n    return anteproyecto\n# funcion para recuperar un proyecto Final\ndef recuperar_proyecto_final(anteproyecto):\n    proyecto_final = ModelProyectoFinal.objects.get(\n        anteproyecto=anteproyecto) if ModelProyectoFinal.objects.filter(anteproyecto=anteproyecto).exists() else None\n    return proyecto_final\n# funcion para recuperar proyectos finales",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_proyecto_final",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_proyecto_final(anteproyecto):\n    proyecto_final = ModelProyectoFinal.objects.get(\n        anteproyecto=anteproyecto) if ModelProyectoFinal.objects.filter(anteproyecto=anteproyecto).exists() else None\n    return proyecto_final\n# funcion para recuperar proyectos finales\ndef recuperar_proyecto_aceptado(anteproyecto):\n    proyecto_final = ModelProyectoFinal.objects.get(\n        anteproyecto=anteproyecto, estado=True) if ModelProyectoFinal.objects.filter(anteproyecto=anteproyecto).exists() else None\n    return proyecto_final\ndef recuperar_proyectos_finales():",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_proyecto_aceptado",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_proyecto_aceptado(anteproyecto):\n    proyecto_final = ModelProyectoFinal.objects.get(\n        anteproyecto=anteproyecto, estado=True) if ModelProyectoFinal.objects.filter(anteproyecto=anteproyecto).exists() else None\n    return proyecto_final\ndef recuperar_proyectos_finales():\n    proyectos_finales = ModelProyectoFinal.objects.all()\n    return proyectos_finales\n# funcion para recuperar una solicitud espeial\ndef recuperar_solicitud_especial(id):\n    solicitud_especial = ModelSolicitudes.objects.get(",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_proyectos_finales",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_proyectos_finales():\n    proyectos_finales = ModelProyectoFinal.objects.all()\n    return proyectos_finales\n# funcion para recuperar una solicitud espeial\ndef recuperar_solicitud_especial(id):\n    solicitud_especial = ModelSolicitudes.objects.get(\n        id=id) if ModelSolicitudes.objects.filter(id=id).exists() else None\n    return solicitud_especial\n# funcion para recuperar solicitudes espeiales\ndef recuperar_solicitudes_especiales():",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitud_especial",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_solicitud_especial(id):\n    solicitud_especial = ModelSolicitudes.objects.get(\n        id=id) if ModelSolicitudes.objects.filter(id=id).exists() else None\n    return solicitud_especial\n# funcion para recuperar solicitudes espeiales\ndef recuperar_solicitudes_especiales():\n    solicitudes_especiales = ModelSolicitudes.objects.all()\n    return solicitudes_especiales\n# funcion para recuperar las imagenes de los usuarios\ndef recuperar_datos_integrantes(nombre):",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitudes_especiales",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_solicitudes_especiales():\n    solicitudes_especiales = ModelSolicitudes.objects.all()\n    return solicitudes_especiales\n# funcion para recuperar las imagenes de los usuarios\ndef recuperar_datos_integrantes(nombre):\n    usuario = Usuarios.objects.get(nombre_completo=nombre) if Usuarios.objects.filter(\n        nombre_completo=nombre).exists() else False\n    if usuario:\n        imagen_binaria = usuario.imagen\n        imagen = base64.b64encode(imagen_binaria).decode(",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_datos_integrantes",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_datos_integrantes(nombre):\n    usuario = Usuarios.objects.get(nombre_completo=nombre) if Usuarios.objects.filter(\n        nombre_completo=nombre).exists() else False\n    if usuario:\n        imagen_binaria = usuario.imagen\n        imagen = base64.b64encode(imagen_binaria).decode(\n            'utf8') if imagen_binaria else False\n        grupos = usuario.groups.values_list('name', flat=True)\n        grupo = 'Estudiante' if 'Estudiantes' in grupos else 'Director' if 'Directores' in grupos else 'Desconocido'\n        return {'nombre': nombre, 'imagen': imagen, 'grupo': grupo}",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitudes",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_solicitudes():\n    solicitudes = ModelRetroalimentaciones.objects.all()\n    return solicitudes\ndef recuperar_solicitudes_anteproyecto():\n    solicitudes = ModelRetroalimentaciones.objects.filter(\n        anteproyecto__isnull=False)\n    return solicitudes\ndef recuperar_solicitud(anteproyecto):\n    solicitud = ModelRetroalimentaciones.objects.get(\n        anteproyecto=anteproyecto) if ModelRetroalimentaciones.objects.filter(anteproyecto=anteproyecto).exists() else None",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitudes_anteproyecto",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_solicitudes_anteproyecto():\n    solicitudes = ModelRetroalimentaciones.objects.filter(\n        anteproyecto__isnull=False)\n    return solicitudes\ndef recuperar_solicitud(anteproyecto):\n    solicitud = ModelRetroalimentaciones.objects.get(\n        anteproyecto=anteproyecto) if ModelRetroalimentaciones.objects.filter(anteproyecto=anteproyecto).exists() else None\n    return solicitud\n# def recuperar_solicitudes_():\n#     solicitudes = ModelRetroalimentaciones.objects.filter(anteproyecto=True)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitud",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_solicitud(anteproyecto):\n    solicitud = ModelRetroalimentaciones.objects.get(\n        anteproyecto=anteproyecto) if ModelRetroalimentaciones.objects.filter(anteproyecto=anteproyecto).exists() else None\n    return solicitud\n# def recuperar_solicitudes_():\n#     solicitudes = ModelRetroalimentaciones.objects.filter(anteproyecto=True)\n#     return solicitudes\n# funcion de recuperar documento binario\ndef recuperar_documento(documento):\n    documento = base64.b64encode(documento).decode(",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_documento",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_documento(documento):\n    documento = base64.b64encode(documento).decode(\n        'utf-8') if documento else None\n    return documento\n# funcion para recuperar datos de los directores\ndef recuperar_directores():\n    directores = Usuarios.objects.filter(\n        groups__name=\"Directores\").values('nombre_completo', 'email')\n    if directores:\n        return directores",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_directores",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_directores():\n    directores = Usuarios.objects.filter(\n        groups__name=\"Directores\").values('nombre_completo', 'email')\n    if directores:\n        return directores\n    else:\n        directores = None\n        return directores\n@login_required\ndef datosusuario(request):",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "datosusuario",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def datosusuario(request):\n    usuario = request.user\n    imagen = usuario.imagen\n    imagen_convertida = base64.b64encode(\n        imagen).decode('utf-8') if imagen else ''\n    form_editar_usuario = FormEditarUsuario(instance=usuario)\n    form_solicitud = FormAnteproyecto\n    context = {'form_config': form_editar_usuario, 'usuario': usuario,\n               'user_img': imagen_convertida}\n    return context",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "principal_correspondencia",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def principal_correspondencia(request):\n    context = datosusuario(request)\n    num_solicitudes = recuperar_num_solicitudes()\n    num_formatos = recuperar_num_formatos_comite()\n    num_proyectos = recuperar_num_proyectos_pendientes()\n    num_respuestas = recuperar_num_respuestas()\n    context['num_solicitudes'] = num_solicitudes\n    context['num_formatos'] = num_formatos\n    context['num_proyectos'] = num_proyectos\n    context['num_respuestas'] = num_respuestas",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "solicitudes",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def solicitudes(request):\n    context = datosusuario(request)\n    proyectos_finales_pendientes = recuperar_proyectos_finales_pendientes()\n    solicitudes_especiales_pendientes = recuperar_solicitudes_especiales_pendientes()\n    anteproyectos_pendientes = recuperar_anteproyectos_pendientes()\n    context['proyectos_finales'] = proyectos_finales_pendientes.count()\n    context['solicitudes_especiales'] = solicitudes_especiales_pendientes.count()\n    context['anteproyectos'] = anteproyectos_pendientes.count()\n    total_pendientes = proyectos_finales_pendientes.count(\n    ) + solicitudes_especiales_pendientes.count() + anteproyectos_pendientes.count()",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "solicitudes_anteproyectos",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def solicitudes_anteproyectos(request):\n    context = datosusuario(request)\n    if request.method == 'POST':\n        pass\n    else:\n        anteproyectos = recuperar_anteproyectos_pendientes()\n        context['anteproyectos'] = anteproyectos\n        return render(request, 'correspondencia/views_solicitud/list_anteproyectos.html', context)\ndef solicitudes_proyectos_finales(request):\n    context = context = datosusuario(request)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "solicitudes_proyectos_finales",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def solicitudes_proyectos_finales(request):\n    context = context = datosusuario(request)\n    if request.method == 'POST':\n        pass\n    else:\n        proyectos_finales = recuperar_proyectos_finales()\n        context['proyectos_finales'] = proyectos_finales\n        return render(request, 'correspondencia/views_solicitud/list_proyectos_finales.html', context)\n# funcion de la vista de lista de solicitudes especiales\ndef solicitudes_especiales(request):",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "solicitudes_especiales",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def solicitudes_especiales(request):\n    context = datosusuario(request)\n    if request.method == 'POST':\n        pass\n    else:\n        solicitudes_especiales = recuperar_solicitudes_especiales_pendientes()\n        context[\"solicitudes_especiales\"] = solicitudes_especiales\n        return render(request, 'correspondencia/views_solicitud/list_solicitud_especiales.html', context)\ndef view_solicitud_especial(request, id):\n    context = datosusuario(request)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "view_solicitud_especial",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def view_solicitud_especial(request, id):\n    context = datosusuario(request)\n    solicitud_especial = recuperar_solicitud_especial(id)\n    context['solicitud_especial'] = solicitud_especial\n    documento_binario = solicitud_especial.documento_soporte\n    documento_soporte = recuperar_documento(documento_binario)\n    context['documento_soporte'] = documento_soporte\n    if solicitud_especial.anteproyecto:\n        form_anteproyecto = FormAnteproyecto(\n            instance=solicitud_especial.anteproyecto)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "actualizar_datos_solicitud_anteproyecto",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def actualizar_datos_solicitud_anteproyecto(request, id):\n    solicitud_especial = recuperar_solicitud_especial(id)\n    anteproyecto = solicitud_especial.anteproyecto\n    if request.method == 'POST':\n        form_anteproyecto = FormAnteproyecto(\n            request.POST, request.FILES, instance=anteproyecto)\n        if form_anteproyecto.is_valid():\n            form_anteproyecto.save()\n            return redirect('correspondencia:view_solicitud_especial', id=id)\n        else:",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "actualizar_datos_solicitud_proyecto",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def actualizar_datos_solicitud_proyecto(request, id):\n    context = datosusuario(request)\n    solicitud_especial = recuperar_solicitud_especial(id)\n    proyecto = solicitud_especial.proyecto_final\n    anteproyecto = proyecto.anteproyecto\n    if request.method == 'POST':\n        form_proyecto = FormActualizarProyectoFinal(\n            request.POST, request.FILES, instance=proyecto\n        )\n        director = request.POST.get('director')",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "enviar_retroalimentacion_solicitud",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def enviar_retroalimentacion_solicitud(request, id):\n    solicitud_especial = recuperar_solicitud_especial(id)\n    if solicitud_especial.anteproyecto:\n        form_retro = FormRetroalimentacionAnteproyecto(\n            request.POST, request.FILES)\n        if form_retro.is_valid():\n            solicitud_especial.estado = True\n            solicitud_especial.save()\n            retroalimentacion = form_retro.save(commit=False)\n            retroalimentacion.anteproyecto = solicitud_especial.anteproyecto",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "ver_anteproyecto",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def ver_anteproyecto(request, nombre_anteproyecto):\n    context = datosusuario(request)\n    anteproyecto = recuperar_anteproyecto(nombre_anteproyecto)\n    doc_anteproyecto = recuperar_documento(anteproyecto.anteproyecto)\n    doc_carta = recuperar_documento(anteproyecto.carta_presentacion)\n    context['inf_anteproyecto'] = {'anteproyecto': anteproyecto,\n                                   'form_retroalimentacion': FormRetroalimentacionAnteproyecto,\n                                   'doc_anteproyecto': doc_anteproyecto,\n                                   'doc_carta': doc_carta}\n    if anteproyecto:",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "enviar_retroalimentacion",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def enviar_retroalimentacion(request, nombre_anteproyecto):\n    anteproyecto = recuperar_anteproyecto(nombre_anteproyecto)\n    if anteproyecto is None:\n        return redirect('correspondencia:solicitudes')\n    if request.method == 'POST':\n        form_retro = FormRetroalimentacionAnteproyecto(\n            request.POST, request.FILES)\n        if form_retro.is_valid():\n            retroalimentacion = form_retro.save(commit=False)\n            retroalimentacion.anteproyecto = anteproyecto",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "ver_proyecto_final",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def ver_proyecto_final(request, nombre):\n    context = datosusuario(request)\n    anteproyecto = recuperar_anteproyecto(nombre)\n    proyecto_final = recuperar_proyecto_final(anteproyecto)\n    if anteproyecto is None or proyecto_final is None:\n        return redirect('correspondencia:solicitudes')\n    else:\n        integrantes = (anteproyecto.nombre_integrante1, anteproyecto.nombre_integrante2,\n                       anteproyecto.director, anteproyecto.codirector)\n        datos_integrantes = {}",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "asignar_jurados",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def asignar_jurados(request, nombre):\n    context = datosusuario(request)\n    nombre_proyecto = nombre\n    if request.method == 'POST':\n        directores_seleccionados = request.POST.getlist('directores')\n        fecha_sustentacion_str = request.POST.get('fecha_sustentacion')\n        fecha_sustentacion = datetime.fromisoformat(\n            str(fecha_sustentacion_str)).date()\n        asignacion_jurados = ModelAsignacionJurados()\n        anteproyecto = recuperar_anteproyecto(nombre_proyecto)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "solicitudes_respondidas",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def solicitudes_respondidas(request):\n    respuestas = recuperar_solicitudes()\n    context = datosusuario(request)\n    respuestas_dict = {}\n    for i, respuesta in enumerate(respuestas):\n        doc_binario = recuperar_documento(respuesta.doc_retroalimentacion)\n        if respuesta.proyecto_final:\n            print('aqui esta el proyecto')\n            respuestas_dict[f'respuesta_{i}'] = {\n                'respuesta_proyecto_final': respuesta, 'doc_binario': doc_binario}",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "ver_respuesta",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def ver_respuesta(request, id):\n    context = datosusuario(request)\n    if id:\n        respuesta = ModelRetroalimentaciones.objects.get(\n            id=id) if ModelRetroalimentaciones.objects.filter(id=id).exists() else 'None'\n        if respuesta.anteproyecto:\n            integrantes = (respuesta.anteproyecto.nombre_integrante1, respuesta.anteproyecto.nombre_integrante2,\n                           respuesta.anteproyecto.director, respuesta.anteproyecto.codirector)\n        elif respuesta.proyecto_final:\n            integrantes = (respuesta.proyecto_final.anteproyecto.nombre_integrante1, respuesta.proyecto_final.anteproyecto.nombre_integrante2,",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "recuperar_formatos",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def recuperar_formatos():\n    documentos_model = ModelDocumentos.objects.all()\n    documentos = {}\n    if documentos_model:\n        for i, documento in enumerate(documentos_model):\n            documento_binario = documento.documento\n            documento_convert = recuperar_documento(documento_binario)\n            documentos[f'documento{i}'] = {\n                'id': documento.id,\n                'nombre_documento': documento.nombre_documento,",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "formatos_documentos",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def formatos_documentos(request):\n    context = datosusuario(request)\n    if request.method == 'POST':\n        form_cargar_docs = FormDocumentos(request.POST, request.FILES)\n        if form_cargar_docs.is_valid():\n            cargar_documentos = form_cargar_docs.save(commit=False)\n            cargar_documentos.fecha_cargue = fecha_actual()\n            cargar_documentos.save()\n        else:\n            return HttpResponse(f'Error: {form_cargar_docs.errors}')",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "eliminar_formato",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def eliminar_formato(request, id):\n    formato_id = id\n    formato = ModelDocumentos.objects.get(id=formato_id)\n    formato.delete()\n    return redirect('correspondencia:formatos_documentos')\n# funcion para editar un formato\ndef editar_formato(request, id):\n    formato = ModelDocumentos.objects.get(id=id)\n    if request.method == 'POST':\n        form_cargar_docs = FormDocumentos(",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "editar_formato",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def editar_formato(request, id):\n    formato = ModelDocumentos.objects.get(id=id)\n    if request.method == 'POST':\n        form_cargar_docs = FormDocumentos(\n            request.POST, request.FILES, instance=formato)\n        if form_cargar_docs.is_valid():\n            form_cargar_docs.save()\n            return redirect('correspondencia:formatos_documentos')\n            # return redirect('nombre_de_tu_vista_de_exito')  # Redirige a una vista de éxito\n    else:",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "proyectos",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def proyectos(request):\n    context = datosusuario(request)\n    num_proyectos_terminados = recuperar_num_proyectos_terminados()\n    num_proyectos_actuales = recuperar_num_proyectos_pendientes()\n    context['num_proyectos_actuales'] = num_proyectos_actuales\n    context['num_proyectos_terminados'] = num_proyectos_terminados\n    return render(request, 'correspondencia/views_proyectos/proyectos.html', context)\ndef proyectos_finalizados(request):\n    context = datosusuario(request)\n    list_proyectos_finalizados = recuperar_proyectos_finalizados()",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "proyectos_finalizados",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def proyectos_finalizados(request):\n    context = datosusuario(request)\n    list_proyectos_finalizados = recuperar_proyectos_finalizados()\n    dic_proyectos = {}\n    if list_proyectos_finalizados:\n        for i, proyecto in enumerate(list_proyectos_finalizados):\n            documento_convert = proyecto.proyecto_final\n            documento = recuperar_documento(documento_convert)\n            dic_proyectos[f'proyecto{i}'] = {\n                'proyecto': proyecto,",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "proyectos_actuales",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def proyectos_actuales(request):\n    context = datosusuario(request)\n    proyectos_actuales = recuperar_proyectos_pendientes()\n    dic_proyectos = {}\n    if proyectos_actuales:\n        for i, proyecto in enumerate(proyectos_actuales):\n            documento_convert_carta = proyecto.carta_presentacion\n            documento_convert_ante = proyecto.anteproyecto\n            documento_carta = recuperar_documento(documento_convert_carta)\n            documento_ante = recuperar_documento(documento_convert_ante)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "proyecto_final",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def proyecto_final(request, id):\n    context = datosusuario(request)\n    proyecto = recuperar_proyecto_finalizado(id)\n    # return HttpResponse(\n    #     proyecto\n    # )\n    integrantes = (proyecto.anteproyecto.nombre_integrante1, proyecto.anteproyecto.nombre_integrante2,\n                   proyecto.anteproyecto.director, proyecto.anteproyecto.codirector)\n    datos_integrantes = {}\n    for i, integrante in enumerate(integrantes, start=1):",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "proyecto_actual",
        "kind": 2,
        "importPath": "correspondencia.views",
        "description": "correspondencia.views",
        "peekOfCode": "def proyecto_actual(request, id):\n    context = datosusuario(request)\n    proyecto = recuperar_proyecto_actual(id)\n    integrantes = (proyecto.nombre_integrante1, proyecto.nombre_integrante2,\n                   proyecto.director, proyecto.codirector)\n    datos_integrantes = {}\n    for i, integrante in enumerate(integrantes, start=1):\n        if integrante:\n            datos_integrantes[f'integrante_{i}'] = recuperar_datos_integrantes(\n                integrante)",
        "detail": "correspondencia.views",
        "documentation": {}
    },
    {
        "label": "DirectorConfig",
        "kind": 6,
        "importPath": "director.apps",
        "description": "director.apps",
        "peekOfCode": "class DirectorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'director'",
        "detail": "director.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "director.urls",
        "description": "director.urls",
        "peekOfCode": "app_name = 'director'\n# Definicion de las rutas de la aplicacion\nurlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando'),\n    path('', views.principal_director, name='principal_director'),\n]",
        "detail": "director.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "director.urls",
        "description": "director.urls",
        "peekOfCode": "urlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando'),\n    path('', views.principal_director, name='principal_director'),\n]",
        "detail": "director.urls",
        "documentation": {}
    },
    {
        "label": "principal_director",
        "kind": 2,
        "importPath": "director.views",
        "description": "director.views",
        "peekOfCode": "def principal_director(request):\n    usuario = request.user\n    # recuperacion de la imagen propia del usuaario en formato binario\n    # print(imagen, 'esta es la imagen')\n    imagen = usuario.imagen\n    imagen_convertida = base64.b64encode(\n        imagen).decode('utf-8') if imagen else ''\n    if request.method == 'POST':\n        editar_usuario(request)\n    else:",
        "detail": "director.views",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\\\Lib\\\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "djenv.Scripts.activate_this",
        "description": "djenv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "djenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0001_initial",
        "description": "estudiante.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Estudiante',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "estudiante.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0002_modelanteproyecto_enviado",
        "description": "estudiante.migrations.0002_modelanteproyecto_enviado",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modelanteproyecto',\n            name='enviado',\n            field=models.BooleanField(default=False),\n            preserve_default=False,",
        "detail": "estudiante.migrations.0002_modelanteproyecto_enviado",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0003_alter_modelanteproyecto_director_and_more",
        "description": "estudiante.migrations.0003_alter_modelanteproyecto_director_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0002_modelanteproyecto_enviado'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='director',\n            field=models.CharField(blank=True, max_length=200, null=True),\n        ),",
        "detail": "estudiante.migrations.0003_alter_modelanteproyecto_director_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0004_alter_modelanteproyecto_coodirector_and_more",
        "description": "estudiante.migrations.0004_alter_modelanteproyecto_coodirector_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0003_alter_modelanteproyecto_director_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='coodirector',\n            field=models.CharField(blank=True, max_length=200, null=True),\n        ),",
        "detail": "estudiante.migrations.0004_alter_modelanteproyecto_coodirector_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0005_remove_modelanteproyecto_enviado",
        "description": "estudiante.migrations.0005_remove_modelanteproyecto_enviado",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0004_alter_modelanteproyecto_coodirector_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='modelanteproyecto',\n            name='enviado',\n        ),\n    ]",
        "detail": "estudiante.migrations.0005_remove_modelanteproyecto_enviado",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0006_alter_modelanteproyecto_user",
        "description": "estudiante.migrations.0006_alter_modelanteproyecto_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0005_remove_modelanteproyecto_enviado'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='user',\n            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='Anteproyecto', to=settings.AUTH_USER_MODEL),",
        "detail": "estudiante.migrations.0006_alter_modelanteproyecto_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more",
        "description": "estudiante.migrations.0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0006_alter_modelanteproyecto_user'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='modelanteproyecto',\n            old_name='nombre_proyecto',\n            new_name='nombre_anteproyecto',\n        ),",
        "detail": "estudiante.migrations.0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0008_remove_modelanteproyecto_rev_dadas",
        "description": "estudiante.migrations.0008_remove_modelanteproyecto_rev_dadas",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0007_rename_nombre_proyecto_modelanteproyecto_nombre_anteproyecto_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='modelanteproyecto',\n            name='rev_dadas',\n        ),\n    ]",
        "detail": "estudiante.migrations.0008_remove_modelanteproyecto_rev_dadas",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0009_modelanteproyecto_descripcion",
        "description": "estudiante.migrations.0009_modelanteproyecto_descripcion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0008_remove_modelanteproyecto_rev_dadas'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modelanteproyecto',\n            name='descripcion',\n            field=models.CharField(blank=True, max_length=500, null=True),\n        ),",
        "detail": "estudiante.migrations.0009_modelanteproyecto_descripcion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0010_alter_modelanteproyecto_descripcion",
        "description": "estudiante.migrations.0010_alter_modelanteproyecto_descripcion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0009_modelanteproyecto_descripcion'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='descripcion',\n            field=models.TextField(blank=True, max_length=500, null=True),\n        ),",
        "detail": "estudiante.migrations.0010_alter_modelanteproyecto_descripcion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0011_alter_modelanteproyecto_descripcion",
        "description": "estudiante.migrations.0011_alter_modelanteproyecto_descripcion",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0010_alter_modelanteproyecto_descripcion'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='descripcion',\n            field=models.TextField(blank=True, max_length=10000, null=True),\n        ),",
        "detail": "estudiante.migrations.0011_alter_modelanteproyecto_descripcion",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0012_modelproyectofinal_delete_estudiante_and_more",
        "description": "estudiante.migrations.0012_modelproyectofinal_delete_estudiante_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0011_alter_modelanteproyecto_descripcion'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelProyectoFinal',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "estudiante.migrations.0012_modelproyectofinal_delete_estudiante_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0013_alter_modelanteproyecto_user",
        "description": "estudiante.migrations.0013_alter_modelanteproyecto_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0012_modelproyectofinal_delete_estudiante_and_more'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='user',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='Anteproyecto', to=settings.AUTH_USER_MODEL),",
        "detail": "estudiante.migrations.0013_alter_modelanteproyecto_user",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0014_alter_modelanteproyecto_user_and_more",
        "description": "estudiante.migrations.0014_alter_modelanteproyecto_user_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0013_alter_modelanteproyecto_user'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelanteproyecto',\n            name='user',\n            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Anteproyecto', to=settings.AUTH_USER_MODEL),",
        "detail": "estudiante.migrations.0014_alter_modelanteproyecto_user_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0015_modelproyectofinal_codirector",
        "description": "estudiante.migrations.0015_modelproyectofinal_codirector",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0014_alter_modelanteproyecto_user_and_more'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modelproyectofinal',\n            name='codirector',\n            field=models.CharField(max_length=200, null=True),\n        ),",
        "detail": "estudiante.migrations.0015_modelproyectofinal_codirector",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0016_rename_coodirector_modelanteproyecto_codirector",
        "description": "estudiante.migrations.0016_rename_coodirector_modelanteproyecto_codirector",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0015_modelproyectofinal_codirector'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='modelanteproyecto',\n            old_name='coodirector',\n            new_name='codirector',\n        ),",
        "detail": "estudiante.migrations.0016_rename_coodirector_modelanteproyecto_codirector",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0017_modelanteproyecto_estado_modelproyectofinal_estado",
        "description": "estudiante.migrations.0017_modelanteproyecto_estado_modelproyectofinal_estado",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0016_rename_coodirector_modelanteproyecto_codirector'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='modelanteproyecto',\n            name='estado',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "estudiante.migrations.0017_modelanteproyecto_estado_modelproyectofinal_estado",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0018_alter_modelproyectofinal_codirector",
        "description": "estudiante.migrations.0018_alter_modelproyectofinal_codirector",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0017_modelanteproyecto_estado_modelproyectofinal_estado'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelproyectofinal',\n            name='codirector',\n            field=models.CharField(blank=True, max_length=200, null=True),\n        ),",
        "detail": "estudiante.migrations.0018_alter_modelproyectofinal_codirector",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0019_alter_modelproyectofinal_anteproyecto",
        "description": "estudiante.migrations.0019_alter_modelproyectofinal_anteproyecto",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0018_alter_modelproyectofinal_codirector'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelproyectofinal',\n            name='anteproyecto',\n            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='Proyecto_Final', to='estudiante.modelanteproyecto'),\n        ),",
        "detail": "estudiante.migrations.0019_alter_modelproyectofinal_anteproyecto",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0020_modelasignacionjurados_modelproyectofinal_jurado",
        "description": "estudiante.migrations.0020_modelasignacionjurados_modelproyectofinal_jurado",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0019_alter_modelproyectofinal_anteproyecto'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelAsignacionJurados',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('nombre_jurado', models.CharField(max_length=50)),",
        "detail": "estudiante.migrations.0020_modelasignacionjurados_modelproyectofinal_jurado",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0021_alter_modelproyectofinal_anteproyecto",
        "description": "estudiante.migrations.0021_alter_modelproyectofinal_anteproyecto",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0020_modelasignacionjurados_modelproyectofinal_jurado'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='modelproyectofinal',\n            name='anteproyecto',\n            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='Proyecto_Final', to='estudiante.modelanteproyecto'),\n        ),",
        "detail": "estudiante.migrations.0021_alter_modelproyectofinal_anteproyecto",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "estudiante.migrations.0022_modelobjetivogeneral_modelobjetivosespecificos_and_more",
        "description": "estudiante.migrations.0022_modelobjetivogeneral_modelobjetivosespecificos_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('estudiante', '0021_alter_modelproyectofinal_anteproyecto'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelObjetivoGeneral',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('descripcion', models.CharField(blank=True, max_length=1000, null=True)),",
        "detail": "estudiante.migrations.0022_modelobjetivogeneral_modelobjetivosespecificos_and_more",
        "documentation": {}
    },
    {
        "label": "ModelAnteproyectoAdmin",
        "kind": 6,
        "importPath": "estudiante.admin",
        "description": "estudiante.admin",
        "peekOfCode": "class ModelAnteproyectoAdmin(admin.ModelAdmin):\n    list_display = (\n        'nombre_anteproyecto',\n        'nombre_integrante1',\n        'nombre_integrante2',\n        'director',\n        'codirector',\n        'carta_presentacion_link',\n        'anteproyecto_link'\n    )",
        "detail": "estudiante.admin",
        "documentation": {}
    },
    {
        "label": "ModelProyectoFinalAdmin",
        "kind": 6,
        "importPath": "estudiante.admin",
        "description": "estudiante.admin",
        "peekOfCode": "class ModelProyectoFinalAdmin(admin.ModelAdmin):\n    list_display = (\n        'user',\n        'anteproyecto',\n        'jurado',\n        'director',\n        'codirector',\n        'fecha_envio',\n        'solicitud_enviada',\n        'estado',",
        "detail": "estudiante.admin",
        "documentation": {}
    },
    {
        "label": "EstudianteConfig",
        "kind": 6,
        "importPath": "estudiante.apps",
        "description": "estudiante.apps",
        "peekOfCode": "class EstudianteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'estudiante'",
        "detail": "estudiante.apps",
        "documentation": {}
    },
    {
        "label": "FormAnteproyecto",
        "kind": 6,
        "importPath": "estudiante.forms",
        "description": "estudiante.forms",
        "peekOfCode": "class FormAnteproyecto(forms.ModelForm):\n    carta_presentacion_convert = forms.FileField(required=False)\n    anteproyecto_convert = forms.FileField(required=False)\n    class Meta:\n        model = ModelAnteproyecto\n        fields = ('nombre_anteproyecto', 'descripcion', 'nombre_integrante1', 'nombre_integrante2',\n                  'carta_presentacion_convert', 'anteproyecto_convert', 'director', 'codirector')\n        widgets = {\n            'nombre_integrante2': forms.TextInput(attrs={'placeholder': 'Si tienes.'}),\n            'codirector': forms.TextInput(attrs={'placeholder': 'Si tienes.'}),",
        "detail": "estudiante.forms",
        "documentation": {}
    },
    {
        "label": "FormProyectoFinal",
        "kind": 6,
        "importPath": "estudiante.forms",
        "description": "estudiante.forms",
        "peekOfCode": "class FormProyectoFinal(forms.ModelForm):\n    doc_proyecto_final_form = forms.FileField(required=True)\n    carta_presentacion_final_form = forms.FileField(required=True)\n    class Meta:\n        model = ModelProyectoFinal\n        fields = ('doc_proyecto_final_form', 'carta_presentacion_final_form')\n    def save(self, commit=True):\n        form_proyecto_final = super().save(commit=False)\n        # Leer los archivos como binarios y agregar mensajes de depuración\n        doc_proyecto_final = self.cleaned_data['doc_proyecto_final_form'].read()",
        "detail": "estudiante.forms",
        "documentation": {}
    },
    {
        "label": "FormActualizarProyectoFinal",
        "kind": 6,
        "importPath": "estudiante.forms",
        "description": "estudiante.forms",
        "peekOfCode": "class FormActualizarProyectoFinal(forms.ModelForm):\n    doc_proyecto_final_form = forms.FileField(required=True)\n    carta_presentacion_final_form = forms.FileField(required=True)\n    class Meta:\n        model = ModelProyectoFinal\n        fields = ('doc_proyecto_final_form',\n                  'carta_presentacion_final_form', 'director', 'codirector')\n    def __init__(self, *args, **kwargs):\n        super(FormActualizarProyectoFinal, self).__init__(*args, **kwargs)\n        if self.instance and self.instance.pk:",
        "detail": "estudiante.forms",
        "documentation": {}
    },
    {
        "label": "ModelAnteproyecto",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class ModelAnteproyecto(models.Model):\n    user = models.ForeignKey(\n        Usuarios, on_delete=models.CASCADE, related_name='Anteproyecto', blank=True, null=True)\n    nombre_anteproyecto = models.CharField(max_length=200)\n    nombre_integrante1 = models.CharField(max_length=200)\n    nombre_integrante2 = models.CharField(\n        max_length=200, null=True, blank=True)  # Cambio aquí\n    descripcion = models.TextField(\n        max_length=10000, null=True, blank=True)  # Cambio aquí\n    carta_presentacion = models.BinaryField(null=True, blank=True)",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelAsignacionJurados",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class ModelAsignacionJurados(models.Model):\n    nombre_jurado = models.CharField(max_length=50)\n    fecha_sustentacion = models.DateField(max_length=50)\n    def save(self, *args, **kwargs):\n        super().save(*args, **kwargs)\nclass ModelProyectoFinal(models.Model):\n    user = models.OneToOneField(\n        Usuarios, on_delete=models.CASCADE, related_name='Proyecto_Final', blank=True, null=True)\n    anteproyecto = models.OneToOneField(\n        ModelAnteproyecto, on_delete=models.CASCADE, related_name='Proyecto_Final', blank=True, null=True)",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelProyectoFinal",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class ModelProyectoFinal(models.Model):\n    user = models.OneToOneField(\n        Usuarios, on_delete=models.CASCADE, related_name='Proyecto_Final', blank=True, null=True)\n    anteproyecto = models.OneToOneField(\n        ModelAnteproyecto, on_delete=models.CASCADE, related_name='Proyecto_Final', blank=True, null=True)\n    jurado = models.ForeignKey(\n        ModelAsignacionJurados, on_delete=models.SET_NULL, related_name='Proyecto_Final', blank=True, null=True)\n    descripcion = models.TextField(max_length=10000, null=True, blank=True)\n    carta_presentacion_final = models.BinaryField(null=True, blank=True)\n    proyecto_final = models.BinaryField(null=True, blank=True)",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelObjetivoGeneral",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class ModelObjetivoGeneral(models.Model):\n    anteproyecto = models.OneToOneField(ModelAnteproyecto, on_delete = models.CASCADE,  related_name='objetivo_general',blank=True, null=True)\n    descripcion = models.CharField(max_length=1000, blank=True, null=True)\n    estado = models.BooleanField(blank=True, default=False)\nclass ModelObjetivosEspecificos(models.Model):\n    objetivo_general = models.ForeignKey(ModelObjetivoGeneral, on_delete=models.CASCADE, related_name=\"objetivos_especificos\",blank=True, null=True)\n    descripcion = models.CharField(max_length=1000, blank=True, null=True)\n    estado = models.BooleanField(blank=True, default=False)\nclass ModelActividades(models.Model):\n    objetivos_especificos= models.ForeignKey(ModelObjetivosEspecificos, on_delete=models.CASCADE, related_name=\"actividades\",blank=True, null=True)",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelObjetivosEspecificos",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class ModelObjetivosEspecificos(models.Model):\n    objetivo_general = models.ForeignKey(ModelObjetivoGeneral, on_delete=models.CASCADE, related_name=\"objetivos_especificos\",blank=True, null=True)\n    descripcion = models.CharField(max_length=1000, blank=True, null=True)\n    estado = models.BooleanField(blank=True, default=False)\nclass ModelActividades(models.Model):\n    objetivos_especificos= models.ForeignKey(ModelObjetivosEspecificos, on_delete=models.CASCADE, related_name=\"actividades\",blank=True, null=True)\n    descripcion = models.CharField(max_length=1000, blank=True, null=True)\n    estado = models.BooleanField(blank=True, null=True)",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "ModelActividades",
        "kind": 6,
        "importPath": "estudiante.models",
        "description": "estudiante.models",
        "peekOfCode": "class ModelActividades(models.Model):\n    objetivos_especificos= models.ForeignKey(ModelObjetivosEspecificos, on_delete=models.CASCADE, related_name=\"actividades\",blank=True, null=True)\n    descripcion = models.CharField(max_length=1000, blank=True, null=True)\n    estado = models.BooleanField(blank=True, null=True)",
        "detail": "estudiante.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "estudiante.urls",
        "description": "estudiante.urls",
        "peekOfCode": "app_name = 'estudiante'\n# Definicion de las rutas de la aplicacion\nurlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando'),\n    path('', views.principal_estudiante, name='principal_estudiante'),\n    # path('estudiante', views.estudiante, name='estudiante'),\n    #!funcionando\n    path('solicitud', views.solicitud, name='solicitud'),\n    path('info_proyect/', views.info_proyect, name='info_proyect'),",
        "detail": "estudiante.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "estudiante.urls",
        "description": "estudiante.urls",
        "peekOfCode": "urlpatterns = [\n    # verificacion del funcionamiento de las rutas de las aplicaciones\n    # path('', views.funcionando, name='funcionando'),\n    path('', views.principal_estudiante, name='principal_estudiante'),\n    # path('estudiante', views.estudiante, name='estudiante'),\n    #!funcionando\n    path('solicitud', views.solicitud, name='solicitud'),\n    path('info_proyect/', views.info_proyect, name='info_proyect'),\n    path('enviar_solicitud_proyecto/', views.enviar_solicitud_proyecto,\n         name='enviar_solicitud_proyecto'),",
        "detail": "estudiante.urls",
        "documentation": {}
    },
    {
        "label": "devolver_documento_imagen",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def devolver_documento_imagen(documento_binario):\n    documento = base64.b64encode(documento_binario).decode(\n        'utf-8') if documento_binario else None\n    return documento\n@login_required\ndef datosusuario(request):\n    anteproyecto = ModelAnteproyecto.objects.get(\n        user=request.user) if ModelAnteproyecto.objects.filter(user=request.user).exists() else None\n    usuario = request.user\n    imagen = usuario.imagen",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "datosusuario",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def datosusuario(request):\n    anteproyecto = ModelAnteproyecto.objects.get(\n        user=request.user) if ModelAnteproyecto.objects.filter(user=request.user).exists() else None\n    usuario = request.user\n    imagen = usuario.imagen\n    imagen_convertida = base64.b64encode(\n        imagen).decode('utf-8') if imagen else ''\n    form_editar_usuario = FormEditarUsuario(instance=usuario)\n    form_solicitud = FormAnteproyecto\n    if anteproyecto:",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "contenido_anteproyecto",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def contenido_anteproyecto(request):\n    try:\n        content_anteproyecto = ModelAnteproyecto.objects.get(\n            user=request.user) if ModelAnteproyecto.objects.filter(user=request.user).exists() else None\n        if content_anteproyecto == None:\n            return None\n        else:\n            carta_presentacion_binario = content_anteproyecto.carta_presentacion\n            anteproyecto_binario = content_anteproyecto.anteproyecto\n            carta_presentacion = devolver_documento_imagen(",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "recuperar_retroalimentacion",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def recuperar_retroalimentacion(anteproyecto_):\n    retroalimentaciones = ModelRetroalimentaciones.objects.filter(\n        anteproyecto=anteproyecto_, estado__in=['Aprobado', 'Aprobado_con_correciones']).first() if ModelRetroalimentaciones.objects.filter(anteproyecto=anteproyecto_).exists() else None\n    if retroalimentaciones:\n        doc_convert = devolver_documento_imagen(\n            retroalimentaciones.doc_retroalimentacion)\n        return {'respuesta': retroalimentaciones,\n                'doc_retroalimentacion': doc_convert}\n    else:\n        return None",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "recuperar_retroalimentaciones",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def recuperar_retroalimentaciones(anteproyecto_):\n    retroalimentaciones = ModelRetroalimentaciones.objects.filter(\n        anteproyecto=anteproyecto_)\n    respuestas = {}\n    if retroalimentaciones.exists():\n        for i, retroalimentacion in enumerate(retroalimentaciones):\n            doc_convert = devolver_documento_imagen(\n                retroalimentacion.doc_retroalimentacion)\n            respuestas[f'retroalimentacion_{i}'] = {\n                'respuesta': retroalimentacion,",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "recuperar_anteproyecto",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def recuperar_anteproyecto(request):\n    anteproyecto = ModelAnteproyecto.objects.get(\n        user=request.user) if ModelAnteproyecto.objects.filter(user=request.user).exists() else None\n    return anteproyecto\n# funcion para recuperar el proyecto final\ndef recuperar_proyecto_final(anteproyecto):\n    proyecto_final = ModelProyectoFinal.objects.get(\n        anteproyecto=anteproyecto) if ModelProyectoFinal.objects.filter(anteproyecto=anteproyecto).exists() else None\n    return proyecto_final\n@ login_required",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "recuperar_proyecto_final",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def recuperar_proyecto_final(anteproyecto):\n    proyecto_final = ModelProyectoFinal.objects.get(\n        anteproyecto=anteproyecto) if ModelProyectoFinal.objects.filter(anteproyecto=anteproyecto).exists() else None\n    return proyecto_final\n@ login_required\n@ grupo_usuario('Estudiantes')\ndef principal_estudiante(request):\n    context = {}\n    anteproyecto = recuperar_anteproyecto(request)\n    retroalimentaciones = recuperar_retroalimentaciones(anteproyecto)",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "principal_estudiante",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def principal_estudiante(request):\n    context = {}\n    anteproyecto = recuperar_anteproyecto(request)\n    retroalimentaciones = recuperar_retroalimentaciones(anteproyecto)\n    if request.method == 'POST':\n        editar_usuario(request)\n    else:\n        context = datosusuario(request)\n        context['nombre_anteproyecto'] = anteproyecto.nombre_anteproyecto if anteproyecto else \"No hay anteproyecto\"\n        context['retroalimentacion'] = retroalimentaciones",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "solicitud",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def solicitud(request):\n    context = datosusuario(request)\n    # Si el método es POST, procesamos el formulario.\n    if request.method == 'POST':\n        form = FormAnteproyecto(request.POST, request.FILES)\n        if form.is_valid():\n            anteproyecto = form.save(commit=False)\n            anteproyecto.fecha_envio = fecha_actual()\n            anteproyecto.solicitud_enviada = True\n            anteproyecto.estado = False",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "solicitudes_especificas",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def solicitudes_especificas(request):\n    if request.method == 'POST':\n        form = FormSolicitudes(request.POST, request.FILES)\n        if form.is_valid():\n            solicitud = form.save(commit=False)\n            solicitud.user = request.user\n            if solicitud.relacionado_con == 'Anteproyecto':\n                solicitud.anteproyecto = recuperar_anteproyecto(request)\n            elif solicitud.relacionado_con == 'Proyecto_final':\n                anteproyecto = recuperar_anteproyecto(request)",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "info_proyect",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def info_proyect(request):\n    if request.method == 'POST':\n        context = contenido_anteproyecto(request)\n        return render(request, 'estudiante/Inf_proyect.html', context)\n    else:\n        context = contenido_anteproyecto(request)\n        if context is None:\n            context = {}\n        anteproyecto = recuperar_anteproyecto(request)\n        proyecto_final = recuperar_proyecto_final(anteproyecto)",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "enviar_solicitud_proyecto",
        "kind": 2,
        "importPath": "estudiante.views",
        "description": "estudiante.views",
        "peekOfCode": "def enviar_solicitud_proyecto(request):\n    print(f\"Usuario autenticado: {request.user}\")\n    if request.method == 'POST':\n        anteproyecto = recuperar_anteproyecto(request)\n        print(f\"Archivos subidos: {request.FILES}\")\n        form = FormProyectoFinal(request.POST, request.FILES)\n        if form.is_valid():\n            proyecto_final = form.save(commit=False)\n            proyecto_final.user = request.user\n            proyecto_final.anteproyecto = anteproyecto",
        "detail": "estudiante.views",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "login.migrations.0001_initial",
        "description": "login.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='ModelError',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "login.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "login.migrations.0002_usuarios_nombre_completo",
        "description": "login.migrations.0002_usuarios_nombre_completo",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='usuarios',\n            name='nombre_completo',\n            field=models.CharField(default='default', max_length=100),\n            preserve_default=False,",
        "detail": "login.migrations.0002_usuarios_nombre_completo",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "login.migrations.0003_alter_usuarios_nombre_completo",
        "description": "login.migrations.0003_alter_usuarios_nombre_completo",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('login', '0002_usuarios_nombre_completo'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='usuarios',\n            name='nombre_completo',\n            field=models.CharField(blank=True, max_length=200),\n        ),",
        "detail": "login.migrations.0003_alter_usuarios_nombre_completo",
        "documentation": {}
    },
    {
        "label": "CustomUserAdmin",
        "kind": 6,
        "importPath": "login.admin",
        "description": "login.admin",
        "peekOfCode": "class CustomUserAdmin(UserAdmin):\n    add_form = CustomUserCreationForm\n    # formulario para cambiar los datos del usuario desde el panel admin\n    form = CustomUserChangeForm\n    model = Usuarios\n    list_display = ('email', 'nombres', 'apellidos',\n                    'nombre_completo',  'is_staff', 'is_active')\n    list_filter = ('is_staff', 'is_active', 'groups')\n    fieldsets = (\n        (None, {'fields': ('email', 'password')}),",
        "detail": "login.admin",
        "documentation": {}
    },
    {
        "label": "ModelErrorAdmin",
        "kind": 6,
        "importPath": "login.admin",
        "description": "login.admin",
        "peekOfCode": "class ModelErrorAdmin(admin.ModelAdmin):\n    list_display = ('estado', 'fecha_hora_error')\nadmin.site.register(ModelError, ModelErrorAdmin)",
        "detail": "login.admin",
        "documentation": {}
    },
    {
        "label": "LoginConfig",
        "kind": 6,
        "importPath": "login.apps",
        "description": "login.apps",
        "peekOfCode": "class LoginConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'login'",
        "detail": "login.apps",
        "documentation": {}
    },
    {
        "label": "CustomUserChangeForm",
        "kind": 6,
        "importPath": "login.forms",
        "description": "login.forms",
        "peekOfCode": "class CustomUserChangeForm(UserChangeForm):\n    class Meta:\n        model = Usuarios\n        fields = ('nombres', 'apellidos', 'email', 'nombre_completo',\n                  'password', 'is_active', 'is_staff', 'groups')\nclass CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = Usuarios\n        fields = ('nombres', 'apellidos', 'email', 'password1', 'password2')\n    def save(self, commit=True):",
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "CustomUserCreationForm",
        "kind": 6,
        "importPath": "login.forms",
        "description": "login.forms",
        "peekOfCode": "class CustomUserCreationForm(UserCreationForm):\n    class Meta:\n        model = Usuarios\n        fields = ('nombres', 'apellidos', 'email', 'password1', 'password2')\n    def save(self, commit=True):\n        user = super().save(commit=False)\n        user.is_active = True\n        user.set_password(self.cleaned_data[\"password1\"])\n        user.nombre_completo = f\"{user.nombres} {user.apellidos}\"\n        if commit:",
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "FormRegistro",
        "kind": 6,
        "importPath": "login.forms",
        "description": "login.forms",
        "peekOfCode": "class FormRegistro(UserCreationForm):\n    class Meta:\n        model = Usuarios\n        fields = ('nombres', 'apellidos',\n                  'email', 'password1', 'password2')\n        widgets = {\n            'nombres': forms.TextInput(attrs={'placeholder': 'Digita tus nombres', 'class': 'form-control'}),\n            'apellidos': forms.TextInput(attrs={'placeholder': 'Digita tus apellidos', 'class': 'form-control'}),\n            'email': forms.EmailInput(attrs={'placeholder': 'example@correo.com', 'class': 'form-control'}),\n            'password1': forms.PasswordInput(attrs={",
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "FormEditarUsuario",
        "kind": 6,
        "importPath": "login.forms",
        "description": "login.forms",
        "peekOfCode": "class FormEditarUsuario(forms.ModelForm):\n    imagen_file = forms.ImageField(required=False)\n    current_password = forms.CharField(\n        label='Contraseña actual',\n        widget=forms.PasswordInput(attrs={'class': 'form-control'}),\n        required=False\n    )\n    password1 = forms.CharField(\n        label='Nueva contraseña',\n        widget=forms.PasswordInput(attrs={'class': 'form-control'}),",
        "detail": "login.forms",
        "documentation": {}
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "login.managers",
        "description": "login.managers",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, email, nombres, apellidos, password=None, **extra_fields):\n        if not email:\n            raise ValueError('El email es obligatorio')\n        email = self.normalize_email(email)\n        user = self.model(email=email, nombres=nombres, apellidos=apellidos, **extra_fields)\n        user.set_password(password)\n        user.save(using=self._db)\n        return user\n    def create_superuser(self, email, nombres, apellidos, password=None, **extra_fields):",
        "detail": "login.managers",
        "documentation": {}
    },
    {
        "label": "ModelError",
        "kind": 6,
        "importPath": "login.models",
        "description": "login.models",
        "peekOfCode": "class ModelError(models.Model):\n    estado = models.IntegerField()\n    fecha_hora_error = models.DateTimeField()\nclass Usuarios(AbstractUser):\n    ROLES_CHOICES = (\n        ('estudiante', 'Estudiante'),\n        ('director', 'Director'),\n        ('correspondencia', 'Correspondencia'),\n    )\n    nombres = models.CharField(max_length=100)",
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "Usuarios",
        "kind": 6,
        "importPath": "login.models",
        "description": "login.models",
        "peekOfCode": "class Usuarios(AbstractUser):\n    ROLES_CHOICES = (\n        ('estudiante', 'Estudiante'),\n        ('director', 'Director'),\n        ('correspondencia', 'Correspondencia'),\n    )\n    nombres = models.CharField(max_length=100)\n    apellidos = models.CharField(max_length=100)\n    nombre_completo = models.CharField(max_length=200, blank=True)\n    email = models.EmailField(unique=True)",
        "detail": "login.models",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "login.urls",
        "description": "login.urls",
        "peekOfCode": "app_name = 'login'\nurlpatterns = [\n    #  ruta de registro para el patterns de la app\n    path('', views.loginapps, name='loginapps'),\n    path('registro', views.registro, name='registro'),\n    path('editar_usuario', views.editar_usuario, name='editar_usuario'),\n]",
        "detail": "login.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "login.urls",
        "description": "login.urls",
        "peekOfCode": "urlpatterns = [\n    #  ruta de registro para el patterns de la app\n    path('', views.loginapps, name='loginapps'),\n    path('registro', views.registro, name='registro'),\n    path('editar_usuario', views.editar_usuario, name='editar_usuario'),\n]",
        "detail": "login.urls",
        "documentation": {}
    },
    {
        "label": "loginapps",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def loginapps(request):\n    if request.method == 'POST':\n        username = request.POST.get('email')\n        password = request.POST.get('password')\n        print(f\"Username: {username}, Password: {password}\")\n        user = authenticate(request, username=username, password=password)\n        print(f\"Authenticated User: {user}\")\n        if user is not None:\n            print(\"User is authenticated\")\n            auth_login(request, user)",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "registro",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def registro(request):\n    # # ejemplo de uso de mensajes\n    # messages.success(request, 'Operación exitosa.')\n    # # Agregar un mensaje de error\n    # messages.error(request, 'Hubo un error en la operación.')\n    # # Agregar un mensaje de advertencia\n    # messages.warning(request, 'Advertencia: Verifica los detalles.')\n    # # Agregar un mensaje informativo\n    # messages.info(request, 'Información: Revisa la sección de ayuda.')\n    if request.method == 'POST':",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "editar_usuario",
        "kind": 2,
        "importPath": "login.views",
        "description": "login.views",
        "peekOfCode": "def editar_usuario(request):\n    usuario = request.user\n    # recuperacion de la imagen propia del usuaario en formato binario\n    # print(imagen, 'esta es la imagen')\n    imagen = usuario.imagen\n    imagen_convertida = base64.b64encode(\n        imagen).decode('utf-8') if imagen else ''\n    if request.method == 'POST':\n        form = FormEditarUsuario(request.POST, request.FILES, instance=usuario)\n        if form.is_valid():",
        "detail": "login.views",
        "documentation": {}
    },
    {
        "label": "grupo_usuario",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.decoradores",
        "description": "plataform_CIGAP.utils.decoradores",
        "peekOfCode": "def grupo_usuario(nombre_grupo):\n    def decorador(view):\n        def view_envuelta(request, *args, **kwargs):\n            if request.user.is_authenticated:\n                if request.user.groups.filter(name=nombre_grupo).exists():\n                    return view(request, *args, **kwargs)\n                else:\n                    # en este decorador puedo manejar una vista de permisos\n                    return handler404\n            else:",
        "detail": "plataform_CIGAP.utils.decoradores",
        "documentation": {}
    },
    {
        "label": "fecha_actual",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.funcionalidades_fechas",
        "description": "plataform_CIGAP.utils.funcionalidades_fechas",
        "peekOfCode": "def fecha_actual():\n    bogota_zone = pytz.timezone('America/Bogota')\n    bogota_time = datetime.datetime.now(bogota_zone)\n    bogota_timestr = bogota_time.strftime('%Y-%m-%d %H:%M:%S')\n    fecha_actual = bogota_timestr\n    return fecha_actual\nprint(fecha_actual())",
        "detail": "plataform_CIGAP.utils.funcionalidades_fechas",
        "documentation": {}
    },
    {
        "label": "recuperar_num_respuestas",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_num_respuestas():\n    num_respuestas = ModelRetroalimentaciones.objects.all().count()\n    return num_respuestas\ndef recuperar_num_proyectos_terminados():\n    num_proyectos = ModelProyectoFinal.objects.filter(estado=True).count()\n    return num_proyectos\ndef recuperar_num_proyectos_pendientes():\n    num_proyectos_pendientes = ModelAnteproyecto.objects.filter(\n        estado=True).count()\n    return num_proyectos_pendientes",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_num_proyectos_terminados",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_num_proyectos_terminados():\n    num_proyectos = ModelProyectoFinal.objects.filter(estado=True).count()\n    return num_proyectos\ndef recuperar_num_proyectos_pendientes():\n    num_proyectos_pendientes = ModelAnteproyecto.objects.filter(\n        estado=True).count()\n    return num_proyectos_pendientes\ndef recuperar_num_solicitudes():\n    num_solicitudes = ModelSolicitudes.objects.filter(\n        estado=False).count()",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_num_proyectos_pendientes",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_num_proyectos_pendientes():\n    num_proyectos_pendientes = ModelAnteproyecto.objects.filter(\n        estado=True).count()\n    return num_proyectos_pendientes\ndef recuperar_num_solicitudes():\n    num_solicitudes = ModelSolicitudes.objects.filter(\n        estado=False).count()\n    num_anteproyectos = ModelAnteproyecto.objects.filter(\n        Q(solicitud_enviada=True) & Q(estado=False)).count()\n    num_proyectos_finales = ModelProyectoFinal.objects.filter(",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_num_solicitudes",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_num_solicitudes():\n    num_solicitudes = ModelSolicitudes.objects.filter(\n        estado=False).count()\n    num_anteproyectos = ModelAnteproyecto.objects.filter(\n        Q(solicitud_enviada=True) & Q(estado=False)).count()\n    num_proyectos_finales = ModelProyectoFinal.objects.filter(\n        Q(solicitud_enviada=True) & Q(estado=False)).count()\n    print(num_solicitudes)\n    print(num_anteproyectos)\n    print(num_proyectos_finales)",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_num_formatos_comite",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_num_formatos_comite():\n    num_formatos = ModelDocumentos.objects.all().count()\n    return num_formatos\n#######################################################################################################\n# revisar\ndef recuperar_proyectos_pendientes():\n    anteproyectos = ModelAnteproyecto.objects.filter(\n        Q(solicitud_enviada=True) & Q(estado=True))\n    proyectos_finales = ModelProyectoFinal.objects.filter(Q(solicitud_enviada=False) & Q(estado=False))\n    if anteproyectos and proyectos_finales:",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_proyectos_pendientes",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_proyectos_pendientes():\n    anteproyectos = ModelAnteproyecto.objects.filter(\n        Q(solicitud_enviada=True) & Q(estado=True))\n    proyectos_finales = ModelProyectoFinal.objects.filter(Q(solicitud_enviada=False) & Q(estado=False))\n    if anteproyectos and proyectos_finales:\n        print(anteproyectos, 'Desde utilidades')\n        return anteproyectos\n    else:\n        return anteproyectos\ndef recuperar_proyectos_finalizados():",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_proyectos_finalizados",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_proyectos_finalizados():\n    proyectos_finalizados = ModelProyectoFinal.objects.filter(\n        Q(solicitud_enviada=True) & Q(estado=True))\n    if not proyectos_finalizados:\n        proyectos_finalizados = None\n    return proyectos_finalizados\ndef recuperar_proyecto_finalizado(id):\n    proyecto = ModelProyectoFinal.objects.get(\n        id=id) if ModelProyectoFinal.objects.filter(id=id).exists() else None\n    return proyecto",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_proyecto_finalizado",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_proyecto_finalizado(id):\n    proyecto = ModelProyectoFinal.objects.get(\n        id=id) if ModelProyectoFinal.objects.filter(id=id).exists() else None\n    return proyecto\ndef recuperar_proyecto_actual(id):\n    proyecto = ModelAnteproyecto.objects.get(\n        id=id) if ModelAnteproyecto.objects.filter(id=id).exists() else None\n    return proyecto\ndef recuperar_solicitudes_especiales_proyecto(proyecto, anteproyecto):\n    solicitudes_especiales_proyecto = ModelSolicitudes.objects.filter(",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_proyecto_actual",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_proyecto_actual(id):\n    proyecto = ModelAnteproyecto.objects.get(\n        id=id) if ModelAnteproyecto.objects.filter(id=id).exists() else None\n    return proyecto\ndef recuperar_solicitudes_especiales_proyecto(proyecto, anteproyecto):\n    solicitudes_especiales_proyecto = ModelSolicitudes.objects.filter(\n        Q(proyecto_final=proyecto) | Q(anteproyecto=anteproyecto))\n    print(solicitudes_especiales_proyecto .count())\n    return solicitudes_especiales_proyecto\n#######################################################################################################",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "recuperar_solicitudes_especiales_proyecto",
        "kind": 2,
        "importPath": "plataform_CIGAP.utils.recuperaciones",
        "description": "plataform_CIGAP.utils.recuperaciones",
        "peekOfCode": "def recuperar_solicitudes_especiales_proyecto(proyecto, anteproyecto):\n    solicitudes_especiales_proyecto = ModelSolicitudes.objects.filter(\n        Q(proyecto_final=proyecto) | Q(anteproyecto=anteproyecto))\n    print(solicitudes_especiales_proyecto .count())\n    return solicitudes_especiales_proyecto\n#######################################################################################################",
        "detail": "plataform_CIGAP.utils.recuperaciones",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "plataform_CIGAP.asgi",
        "description": "plataform_CIGAP.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "plataform_CIGAP.asgi",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-fk&953!oxm!!jd)td-gspnj!(gem1*-&bk&hrvizjw&$u^9q$^'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-fk&953!oxm!!jd)td-gspnj!(gem1*-&bk&hrvizjw&$u^9q$^'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'correspondencia',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'correspondencia',\n    'director',\n    'estudiante',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'plataform_CIGAP.urls'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "ROOT_URLCONF = 'plataform_CIGAP.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        # Directorio global de templates\n        'DIRS': [os.path.join(BASE_DIR, 'plataform_CIGAP', 'templates')],\n        # 'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        # Directorio global de templates\n        'DIRS': [os.path.join(BASE_DIR, 'plataform_CIGAP', 'templates')],\n        # 'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "WSGI_APPLICATION = 'plataform_CIGAP.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "STATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Apartado de autenticaciones\nAUTH_USER_MODEL = 'login.Usuarios'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'plataform_CIGAP', 'static'),\n]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Apartado de autenticaciones\nAUTH_USER_MODEL = 'login.Usuarios'\n# cambiar el lenguaje del codigo a español en el navegador",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Apartado de autenticaciones\nAUTH_USER_MODEL = 'login.Usuarios'\n# cambiar el lenguaje del codigo a español en el navegador\nLANGUAGE_CODE = 'es'\n# reajustes del direcciones depues del login\n# LOGIN_URL = '/'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n# Apartado de autenticaciones\nAUTH_USER_MODEL = 'login.Usuarios'\n# cambiar el lenguaje del codigo a español en el navegador\nLANGUAGE_CODE = 'es'\n# reajustes del direcciones depues del login\n# LOGIN_URL = '/'\n# LOGIN_REDIRECT_URL = '/estudiante/'\n# LOGOUT_REDIRECT_URL = '/'\n# autenticaciones de contraseña",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'login.Usuarios'\n# cambiar el lenguaje del codigo a español en el navegador\nLANGUAGE_CODE = 'es'\n# reajustes del direcciones depues del login\n# LOGIN_URL = '/'\n# LOGIN_REDIRECT_URL = '/estudiante/'\n# LOGOUT_REDIRECT_URL = '/'\n# autenticaciones de contraseña\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "LANGUAGE_CODE = 'es'\n# reajustes del direcciones depues del login\n# LOGIN_URL = '/'\n# LOGIN_REDIRECT_URL = '/estudiante/'\n# LOGOUT_REDIRECT_URL = '/'\n# autenticaciones de contraseña\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# manejo de errores",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n]\n# manejo de errores\nCSRF_FAILURE_VIEW = 'plataform_CIGAP.views.csrf_failure'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "CSRF_FAILURE_VIEW",
        "kind": 5,
        "importPath": "plataform_CIGAP.settings",
        "description": "plataform_CIGAP.settings",
        "peekOfCode": "CSRF_FAILURE_VIEW = 'plataform_CIGAP.views.csrf_failure'",
        "detail": "plataform_CIGAP.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "plataform_CIGAP.urls",
        "description": "plataform_CIGAP.urls",
        "peekOfCode": "urlpatterns = [\n    #  ruta de registro para el patterns de la app\n    # path('registro/', views.registro, name='registro'),\n    # path('', views.loginapps, name='loginapps'),\n    path('admin/', admin.site.urls),\n    path('estudiante/', include('estudiante.urls')),\n    path('director/', include('director.urls')),\n    path('correspondencia/', include('correspondencia.urls')),\n    path('', include('login.urls')),\n    # vista y url del logout",
        "detail": "plataform_CIGAP.urls",
        "documentation": {}
    },
    {
        "label": "handler400",
        "kind": 5,
        "importPath": "plataform_CIGAP.urls",
        "description": "plataform_CIGAP.urls",
        "peekOfCode": "handler400 = 'plataform_CIGAP.views.handler400'\nhandler500 = 'plataform_CIGAP.views.handler500'\n# handler401 = 'plataform_CIGAP.views.handler401'\n# handler403 = 'plataform_CIGAP.views.handler403'\nhandler404 = 'plataform_CIGAP.views.handler404'",
        "detail": "plataform_CIGAP.urls",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 5,
        "importPath": "plataform_CIGAP.urls",
        "description": "plataform_CIGAP.urls",
        "peekOfCode": "handler500 = 'plataform_CIGAP.views.handler500'\n# handler401 = 'plataform_CIGAP.views.handler401'\n# handler403 = 'plataform_CIGAP.views.handler403'\nhandler404 = 'plataform_CIGAP.views.handler404'",
        "detail": "plataform_CIGAP.urls",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 5,
        "importPath": "plataform_CIGAP.urls",
        "description": "plataform_CIGAP.urls",
        "peekOfCode": "handler404 = 'plataform_CIGAP.views.handler404'",
        "detail": "plataform_CIGAP.urls",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def logout_user(request):\n    logout(request)\n    return redirect('login:loginapps')\n# def errors(request):\n#     return render(request, 'errors.html')\nerrores = {\n    '404': {\n        'num_error': '404',\n        'mensaje': 'La página solicitada <b>no fue encontrada</b>. Esto puede suceder si la <b>URL está mal escrita</b>, si la página <b>ha sido eliminada o si se esta intentando <b>acceder sin sesión</b> tomando una nueva redirección de URL.</b>'\n    },",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "handler404",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def handler404(request, exception):\n    return render(request, 'errors.html', errores['404'])\ndef handler400(request, exception):\n    return render(request, 'errors.html', errores['400'])\n# manejo del token\n# recordar que como este es personalizado respecto al error del token, se instancion en el settings\ndef csrf_failure(request, reason=\"\"):\n    return render(request, 'errors.html', errores['403'], status=403)\n# def handler403(request, exception=None):\n#     return render(request, 'errors.html', errores['403'], status=403)",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "handler400",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def handler400(request, exception):\n    return render(request, 'errors.html', errores['400'])\n# manejo del token\n# recordar que como este es personalizado respecto al error del token, se instancion en el settings\ndef csrf_failure(request, reason=\"\"):\n    return render(request, 'errors.html', errores['403'], status=403)\n# def handler403(request, exception=None):\n#     return render(request, 'errors.html', errores['403'], status=403)\n# esta no maneja excepcion\ndef handler500(request):",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "csrf_failure",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def csrf_failure(request, reason=\"\"):\n    return render(request, 'errors.html', errores['403'], status=403)\n# def handler403(request, exception=None):\n#     return render(request, 'errors.html', errores['403'], status=403)\n# esta no maneja excepcion\ndef handler500(request):\n    return render(request, 'errors.html', errores['500'])\n# def handler401(request,exception):\n#     return render(request, 'errors.html', errores['401'])\ndef handler500(request):",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def handler500(request):\n    return render(request, 'errors.html', errores['500'])\n# def handler401(request,exception):\n#     return render(request, 'errors.html', errores['401'])\ndef handler500(request):\n    return render(request, 'errors.html', errores['500'])\n# def handler401(request,exception):\n#     return render(request, 'errors.html', errores['401'])\ndef submit_error(request):\n    if request.method == 'POST':",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "handler500",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def handler500(request):\n    return render(request, 'errors.html', errores['500'])\n# def handler401(request,exception):\n#     return render(request, 'errors.html', errores['401'])\ndef submit_error(request):\n    if request.method == 'POST':\n        codigo = request.POST.get('estado')\n        print(f'Estado recibido: {codigo}')\n        model = ModelError(\n            estado=int(codigo),",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "submit_error",
        "kind": 2,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "def submit_error(request):\n    if request.method == 'POST':\n        codigo = request.POST.get('estado')\n        print(f'Estado recibido: {codigo}')\n        model = ModelError(\n            estado=int(codigo),\n            fecha_hora_error=datetime.datetime.now()\n        )\n        model.save()\n        logout(request)",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "errores",
        "kind": 5,
        "importPath": "plataform_CIGAP.views",
        "description": "plataform_CIGAP.views",
        "peekOfCode": "errores = {\n    '404': {\n        'num_error': '404',\n        'mensaje': 'La página solicitada <b>no fue encontrada</b>. Esto puede suceder si la <b>URL está mal escrita</b>, si la página <b>ha sido eliminada o si se esta intentando <b>acceder sin sesión</b> tomando una nueva redirección de URL.</b>'\n    },\n    '401': {\n        'num_error': '401',\n        'mensaje': '<b>Es necesario autenticarse</b> para acceder a esta página. Por favor, <b>inicia sesión</b> e inténtalo de nuevo.'\n    },\n    '400': {",
        "detail": "plataform_CIGAP.views",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "plataform_CIGAP.wsgi",
        "description": "plataform_CIGAP.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "plataform_CIGAP.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'plataform_CIGAP.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "nombre",
        "kind": 5,
        "importPath": "ss",
        "description": "ss",
        "peekOfCode": "nombre = 'Alex'\nprint(len(nombre))",
        "detail": "ss",
        "documentation": {}
    }
]